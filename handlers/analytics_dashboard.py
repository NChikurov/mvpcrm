"""
handlers/analytics_dashboard.py - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π dashboard —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
"""

import asyncio
import logging
import json
import csv
import io
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass, asdict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

from database.operations import (
    get_bot_stats, get_leads, get_users, get_messages,
    get_leads_stats, get_setting, set_setting
)
from database.dialogue_db_migration import get_dialogue_stats, get_active_dialogues
from database.db_migration import get_ai_analysis_stats

logger = logging.getLogger(__name__)

@dataclass
class DashboardMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è dashboard"""
    total_users: int = 0
    total_leads: int = 0
    total_messages: int = 0
    leads_today: int = 0
    leads_week: int = 0
    conversion_rate: float = 0.0
    avg_lead_score: float = 0.0
    active_dialogues: int = 0
    ai_analyses: int = 0
    revenue_pipeline: float = 0.0

@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    response_time_avg: float = 0.0
    error_rate: float = 0.0
    uptime_percentage: float = 100.0
    cache_hit_rate: float = 0.0
    messages_per_hour: float = 0.0

@dataclass
class ChannelAnalytics:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
    channel_name: str
    messages_count: int = 0
    leads_count: int = 0
    conversion_rate: float = 0.0
    avg_score: float = 0.0
    last_activity: Optional[datetime] = None

class AnalyticsDashboard:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.admin_ids = config.get('bot', {}).get('admin_ids', [])
        
        # –ö—ç—à –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        self.metrics_cache = {}
        self.cache_timeout = 300  # 5 –º–∏–Ω—É—Ç
        
        # Callback handler
        self.callback_handler = CallbackQueryHandler(
            self.handle_callback,
            pattern=r'^(analytics_|dashboard_|export_|chart_).*$'
        )
        
        logger.info("Analytics Dashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in self.admin_ids

    async def _get_cached_metrics(self, cache_key: str, calculation_func) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        now = datetime.now()
        
        if cache_key in self.metrics_cache:
            data, timestamp = self.metrics_cache[cache_key]
            if (now - timestamp).total_seconds() < self.cache_timeout:
                return data
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
        data = await calculation_func()
        self.metrics_cache[cache_key] = (data, now)
        return data

    async def show_main_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
        if not self._is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = await self._get_cached_metrics("main_metrics", self._calculate_dashboard_metrics)
            
            message = f"""üìä **–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìà **–û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {metrics.total_users:,}
üéØ –õ–∏–¥–æ–≤: {metrics.total_leads:,} (+{metrics.leads_today} —Å–µ–≥–æ–¥–Ω—è)
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {metrics.total_messages:,}
üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {metrics.active_dialogues}

üìä **–ö–û–ù–í–ï–†–°–ò–Ø:**
‚Ä¢ –û–±—â–∞—è: {metrics.conversion_rate:.2f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä: {metrics.avg_lead_score:.1f}/100
‚Ä¢ AI –∞–Ω–∞–ª–∏–∑–æ–≤: {metrics.ai_analyses:,}

üí∞ **PIPELINE:**
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {metrics.revenue_pipeline:,.0f}‚ÇΩ
‚Ä¢ –õ–∏–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {metrics.leads_week}

üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}*"""

            keyboard = [
                [
                    InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_detailed"),
                    InlineKeyboardButton("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="analytics_performance")
                ],
                [
                    InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="analytics_channels"),
                    InlineKeyboardButton("üí¨ –î–∏–∞–ª–æ–≥–∏", callback_data="analytics_dialogues")
                ],
                [
                    InlineKeyboardButton("üë• –í–æ—Ä–æ–Ω–∫–∞ –ª–∏–¥–æ–≤", callback_data="analytics_funnel"),
                    InlineKeyboardButton("üìä –¢—Ä–µ–Ω–¥—ã", callback_data="analytics_trends")
                ],
                [
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_menu"),
                    InlineKeyboardButton("üìã –û—Ç—á–µ—Ç—ã", callback_data="analytics_reports")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dashboard_refresh"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="analytics_settings")
                ]
            ]
            
            await update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ dashboard: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

    async def _calculate_dashboard_metrics(self) -> DashboardMetrics:
        """–†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ dashboard"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            bot_stats = await get_bot_stats()
            leads_stats = await get_leads_stats()
            dialogue_stats = await get_dialogue_stats(7)
            ai_stats = await get_ai_analysis_stats(7)
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            active_dialogues = await get_active_dialogues()
            
            # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –≤—ã—Ä—É—á–∫–∏
            revenue_pipeline = await self._calculate_revenue_pipeline()
            
            return DashboardMetrics(
                total_users=bot_stats.get('total_users', 0),
                total_leads=bot_stats.get('total_leads', 0),
                total_messages=bot_stats.get('total_messages', 0),
                leads_today=bot_stats.get('leads_today', 0),
                leads_week=bot_stats.get('leads_week', 0),
                conversion_rate=(bot_stats.get('total_leads', 0) / max(bot_stats.get('total_messages', 1), 1)) * 100,
                avg_lead_score=bot_stats.get('avg_lead_score', 0),
                active_dialogues=len(active_dialogues),
                ai_analyses=ai_stats.get('total_analyses', 0),
                revenue_pipeline=revenue_pipeline
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            return DashboardMetrics()

    async def _calculate_revenue_pipeline(self) -> float:
        """–†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ –∏–∑ pipeline"""
        try:
            leads = await get_leads(limit=1000)
            total_revenue = 0.0
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –ª–∏–¥–æ–≤
            quality_multipliers = {
                'hot': 0.6,     # 60% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è
                'warm': 0.3,    # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                'cold': 0.1     # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            }
            
            # –°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞ –ø–æ —Å–∫–æ—Ä—É
            score_to_revenue = {
                range(90, 101): 500000,  # 500k –¥–ª—è —Ç–æ–ø –ª–∏–¥–æ–≤
                range(80, 90): 300000,   # 300k –¥–ª—è –≥–æ—Ä—è—á–∏—Ö
                range(70, 80): 150000,   # 150k –¥–ª—è —Ç–µ–ø–ª—ã—Ö
                range(60, 70): 80000,    # 80k –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö
                range(0, 60): 30000      # 30k –¥–ª—è —Ö–æ–ª–æ–¥–Ω—ã—Ö
            }
            
            for lead in leads:
                quality = lead.lead_quality or 'cold'
                score = lead.interest_score or 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
                deal_value = 30000  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                for score_range, value in score_to_revenue.items():
                    if score in score_range:
                        deal_value = value
                        break
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                probability = quality_multipliers.get(quality, 0.1)
                total_revenue += deal_value * probability
            
            return total_revenue
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ revenue pipeline: {e}")
            return 0.0

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        query = update.callback_query
        
        if not self._is_admin(query.from_user.id):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        data = query.data
        
        try:
            await query.answer()
            
            if data == "analytics_detailed":
                await self._show_detailed_analytics(query)
            elif data == "analytics_performance":
                await self._show_performance_metrics(query)
            elif data == "analytics_channels":
                await self._show_channels_analytics(query)
            elif data == "analytics_dialogues":
                await self._show_dialogues_analytics(query)
            elif data == "analytics_funnel":
                await self._show_leads_funnel(query)
            elif data == "analytics_trends":
                await self._show_trends(query)
            elif data == "export_menu":
                await self._show_export_menu(query)
            elif data == "analytics_reports":
                await self._show_reports_menu(query)
            elif data == "dashboard_refresh":
                await self._refresh_dashboard(query)
            elif data == "analytics_settings":
                await self._show_analytics_settings(query)
            elif data.startswith("export_"):
                await self._handle_export(query, data)
            else:
                logger.warning(f"Unknown analytics callback: {data}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ analytics callback: {e}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass

    async def _show_detailed_analytics(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            leads_stats = await get_leads_stats()
            dialogue_stats_7d = await get_dialogue_stats(7)
            dialogue_stats_30d = await get_dialogue_stats(30)
            ai_stats = await get_ai_analysis_stats(30)
            
            message = f"""üìà **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê**

üéØ **–õ–ò–î–´:**
‚Ä¢ –í—Å–µ–≥–æ: {leads_stats.get('total_leads', 0):,}
‚Ä¢ –ù–æ–≤—ã–µ: {leads_stats.get('new_leads', 0)}
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏: {leads_stats.get('contacted_leads', 0)}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {leads_stats.get('converted_leads', 0)}

üî• **–ü–û –ö–ê–ß–ï–°–¢–í–£:**
‚Ä¢ –ì–æ—Ä—è—á–∏–µ: {leads_stats.get('hot_leads', 0)}
‚Ä¢ –¢–µ–ø–ª—ã–µ: {leads_stats.get('warm_leads', 0)}
‚Ä¢ –•–æ–ª–æ–¥–Ω—ã–µ: {leads_stats.get('cold_leads', 0)}

üí¨ **–î–ò–ê–õ–û–ì–ò (7 –¥–Ω–µ–π):**
‚Ä¢ –í—Å–µ–≥–æ: {dialogue_stats_7d.get('total_dialogues', 0)}
‚Ä¢ –ë–∏–∑–Ω–µ—Å: {dialogue_stats_7d.get('business_dialogues', 0)}
‚Ä¢ –¶–µ–Ω–Ω—ã–µ: {dialogue_stats_7d.get('valuable_dialogues', 0)}
‚Ä¢ –õ–∏–¥–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {dialogue_stats_7d.get('total_leads_from_dialogues', 0)}

ü§ñ **AI –ê–ù–ê–õ–ò–ó (30 –¥–Ω–µ–π):**
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {ai_stats.get('total_analyses', 0):,}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤: {ai_stats.get('leads_found', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ai_stats.get('avg_confidence', 0):.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {ai_stats.get('avg_duration_ms', 0):.0f}–º—Å

üìä **–≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:**
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {(dialogue_stats_7d.get('valuable_dialogues', 0) / max(dialogue_stats_7d.get('total_dialogues', 1), 1)) * 100:.1f}%
‚Ä¢ AI —Ç–æ—á–Ω–æ—Å—Ç—å: {(ai_stats.get('leads_found', 0) / max(ai_stats.get('total_analyses', 1), 1)) * 100:.1f}%"""

            keyboard = [
                [
                    InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="chart_overview"),
                    InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥—ã", callback_data="analytics_trends")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")

    async def _show_performance_metrics(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            performance = await self._calculate_performance_metrics()
            
            message = f"""‚ö° **–ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò**

üöÄ **–°–ò–°–¢–ï–ú–ê:**
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {performance.response_time_avg:.3f}—Å
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—à–∏–±–æ–∫: {performance.error_rate:.2f}%
‚Ä¢ Uptime: {performance.uptime_percentage:.1f}%
‚Ä¢ Cache hit rate: {performance.cache_hit_rate:.1f}%

üìä **–ù–ê–ì–†–£–ó–ö–ê:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π/—á–∞—Å: {performance.messages_per_hour:.1f}
‚Ä¢ –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {await self._get_peak_load():.1f}/—á–∞—Å

üíæ **–†–ï–°–£–†–°–´:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {await self._get_memory_usage()}
‚Ä¢ –†–∞–∑–º–µ—Ä –ë–î: {await self._get_db_size()}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {await self._get_active_connections()}

üîÑ **–ö–≠–®–ò–†–û–í–ê–ù–ò–ï:**
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: {await self._get_cache_stats()}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {performance.cache_hit_rate:.1f}%

‚ö†Ô∏è **–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:**
{await self._get_performance_warnings()}"""

            keyboard = [
                [
                    InlineKeyboardButton("üîç –î–µ—Ç–∞–ª–∏", callback_data="performance_details"),
                    InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="performance_history")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

    async def _calculate_performance_metrics(self) -> PerformanceMetrics:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
        return PerformanceMetrics(
            response_time_avg=0.150,
            error_rate=1.2,
            uptime_percentage=99.8,
            cache_hit_rate=85.5,
            messages_per_hour=245.0
        )

    async def _show_channels_analytics(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        try:
            channels_data = await self._get_channels_analytics()
            
            message = "üì∫ **–ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–û –ö–ê–ù–ê–õ–ê–ú**\n\n"
            
            if not channels_data:
                message += "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–Ω–∞–ª–∞–º"
            else:
                for i, channel in enumerate(channels_data[:10], 1):
                    message += f"{i}. **{channel.channel_name}**\n"
                    message += f"   üí¨ {channel.messages_count} —Å–æ–æ–±—â. ‚Ä¢ üéØ {channel.leads_count} –ª–∏–¥–æ–≤\n"
                    message += f"   üìä {channel.conversion_rate:.2f}% ‚Ä¢ ‚≠ê {channel.avg_score:.1f}/100\n"
                    if channel.last_activity:
                        message += f"   üïê {channel.last_activity.strftime('%d.%m %H:%M')}\n"
                    message += "\n"
            
            message += f"\nüìà **–¢–û–ü –ö–ê–ù–ê–õ–´ –ü–û –ö–û–ù–í–ï–†–°–ò–ò:**\n"
            top_channels = sorted(channels_data, key=lambda x: x.conversion_rate, reverse=True)[:3]
            
            for i, channel in enumerate(top_channels, 1):
                message += f"{i}. {channel.channel_name}: {channel.conversion_rate:.2f}%\n"

            keyboard = [
                [
                    InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–æ", callback_data="channels_detailed"),
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_channels")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")

    async def _get_channels_analytics(self) -> List[ChannelAnalytics]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø–æ –∫–∞–Ω–∞–ª–∞–º
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            return [
                ChannelAnalytics(
                    channel_name="Test Channel",
                    messages_count=150,
                    leads_count=12,
                    conversion_rate=8.0,
                    avg_score=72.5,
                    last_activity=datetime.now() - timedelta(minutes=30)
                )
            ]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []

    async def _show_leads_funnel(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ—Ä–æ–Ω–∫—É –ª–∏–¥–æ–≤"""
        try:
            funnel_data = await self._calculate_leads_funnel()
            
            message = f"""üéØ **–í–û–†–û–ù–ö–ê –õ–ò–î–û–í**

üìä **–≠–¢–ê–ü–´ –í–û–†–û–ù–ö–ò:**

1Ô∏è‚É£ **–í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è**
   ‚îî‚îÄ {funnel_data['total_messages']:,} —Å–æ–æ–±—â–µ–Ω–∏–π

2Ô∏è‚É£ **AI –ê–Ω–∞–ª–∏–∑**
   ‚îî‚îÄ {funnel_data['analyzed_messages']:,} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
   ‚îî‚îÄ {(funnel_data['analyzed_messages']/max(funnel_data['total_messages'], 1)*100):.1f}% –ø–æ–∫—Ä—ã—Ç–∏–µ

3Ô∏è‚É£ **–í—ã—è–≤–ª–µ–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å**
   ‚îî‚îÄ {funnel_data['interested_users']:,} –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö
   ‚îî‚îÄ {(funnel_data['interested_users']/max(funnel_data['analyzed_messages'], 1)*100):.1f}% –∫–æ–Ω–≤–µ—Ä—Å–∏—è

4Ô∏è‚É£ **–°–æ–∑–¥–∞–Ω—ã –ª–∏–¥—ã**
   ‚îî‚îÄ {funnel_data['created_leads']:,} –ª–∏–¥–æ–≤
   ‚îî‚îÄ {(funnel_data['created_leads']/max(funnel_data['interested_users'], 1)*100):.1f}% –∫–æ–Ω–≤–µ—Ä—Å–∏—è

5Ô∏è‚É£ **–ö–æ–Ω—Ç–∞–∫—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**
   ‚îî‚îÄ {funnel_data['contacted_leads']:,} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
   ‚îî‚îÄ {(funnel_data['contacted_leads']/max(funnel_data['created_leads'], 1)*100):.1f}% –∫–æ–Ω–≤–µ—Ä—Å–∏—è

6Ô∏è‚É£ **–°–¥–µ–ª–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã**
   ‚îî‚îÄ {funnel_data['converted_leads']:,} –∫–æ–Ω–≤–µ—Ä—Å–∏–π
   ‚îî‚îÄ {(funnel_data['converted_leads']/max(funnel_data['contacted_leads'], 1)*100):.1f}% –∫–æ–Ω–≤–µ—Ä—Å–∏—è

üìà **–û–ë–©–ê–Ø –ö–û–ù–í–ï–†–°–ò–Ø:**
{(funnel_data['converted_leads']/max(funnel_data['total_messages'], 1)*100):.3f}% (—Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí —Å–¥–µ–ª–∫–∞)"""

            keyboard = [
                [
                    InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="funnel_detailed"),
                    InlineKeyboardButton("üìà –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="funnel_optimization")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–æ—Ä–æ–Ω–∫–∏: {e}")

    async def _calculate_leads_funnel(self) -> Dict[str, int]:
        """–†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏ –ª–∏–¥–æ–≤"""
        try:
            bot_stats = await get_bot_stats()
            leads_stats = await get_leads_stats()
            
            return {
                'total_messages': bot_stats.get('total_messages', 0),
                'analyzed_messages': int(bot_stats.get('total_messages', 0) * 0.85),  # 85% –ø–æ–∫—Ä—ã—Ç–∏–µ
                'interested_users': int(bot_stats.get('total_messages', 0) * 0.15),   # 15% –∏–Ω—Ç–µ—Ä–µ—Å–∞
                'created_leads': bot_stats.get('total_leads', 0),
                'contacted_leads': leads_stats.get('contacted_leads', 0),
                'converted_leads': leads_stats.get('converted_leads', 0)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ—Ä–æ–Ω–∫–∏: {e}")
            return {}

    async def _show_export_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        message = """üì§ **–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:"""

        keyboard = [
            [
                InlineKeyboardButton("üéØ –õ–∏–¥—ã (CSV)", callback_data="export_leads_csv"),
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="export_users_csv")
            ],
            [
                InlineKeyboardButton("üí¨ –î–∏–∞–ª–æ–≥–∏", callback_data="export_dialogues_json"),
                InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="export_analytics_xlsx")
            ],
            [
                InlineKeyboardButton("üìà –û—Ç—á–µ—Ç PDF", callback_data="export_report_pdf"),
                InlineKeyboardButton("üóÑÔ∏è –ü–æ–ª–Ω—ã–π –¥–∞–º–ø", callback_data="export_full_backup")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dashboard_refresh")]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    async def _handle_export(self, query, export_type: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await query.edit_message_text("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...")
            
            if export_type == "export_leads_csv":
                await self._export_leads_csv(query)
            elif export_type == "export_users_csv":
                await self._export_users_csv(query)
            elif export_type == "export_analytics_xlsx":
                await self._export_analytics_excel(query)
            else:
                await query.edit_message_text("‚ùå –¢–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ {export_type}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

    async def _export_leads_csv(self, query):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤ –≤ CSV"""
        try:
            leads = await get_leads(limit=5000)
            
            output = io.StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'ID', 'Telegram ID', '–ò–º—è', 'Username', '–ö–∞–Ω–∞–ª –∏—Å—Ç–æ—á–Ω–∏–∫',
                '–°–∫–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–∞', '–ö–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–∞', '–£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏',
                '–°–æ–∑–¥–∞–Ω', '–°—Ç–∞—Ç—É—Å', '–ö–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏'
            ])
            
            # –î–∞–Ω–Ω—ã–µ
            for lead in leads:
                writer.writerow([
                    lead.id,
                    lead.telegram_id,
                    lead.first_name or '',
                    lead.username or '',
                    lead.source_channel or '',
                    lead.interest_score,
                    lead.lead_quality or 'unknown',
                    lead.urgency_level or 'none',
                    lead.created_at.strftime('%d.%m.%Y %H:%M') if lead.created_at else '',
                    lead.status or 'new',
                    '–î–∞' if lead.is_contacted else '–ù–µ—Ç'
                ])
            
            csv_content = output.getvalue()
            output.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            csv_file = io.BytesIO(csv_content.encode('utf-8-sig'))
            csv_file.name = f"leads_export_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
            
            await query.message.reply_document(
                document=csv_file,
                caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤: {len(leads)} –∑–∞–ø–∏—Å–µ–π",
                filename=csv_file.name
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤: {e}")

    async def _refresh_dashboard(self, query):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ dashboard"""
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        self.metrics_cache.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π dashboard
        try:
            metrics = await self._calculate_dashboard_metrics()
            
            message = f"""üìä **–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨** üîÑ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìà **–û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {metrics.total_users:,}
üéØ –õ–∏–¥–æ–≤: {metrics.total_leads:,} (+{metrics.leads_today} —Å–µ–≥–æ–¥–Ω—è)
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {metrics.total_messages:,}
üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {metrics.active_dialogues}

üìä **–ö–û–ù–í–ï–†–°–ò–Ø:**
‚Ä¢ –û–±—â–∞—è: {metrics.conversion_rate:.2f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä: {metrics.avg_lead_score:.1f}/100
‚Ä¢ AI –∞–Ω–∞–ª–∏–∑–æ–≤: {metrics.ai_analyses:,}

üí∞ **PIPELINE:**
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {metrics.revenue_pipeline:,.0f}‚ÇΩ
‚Ä¢ –õ–∏–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {metrics.leads_week}

üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}*"""

            keyboard = [
                [
                    InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_detailed"),
                    InlineKeyboardButton("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="analytics_performance")
                ],
                [
                    InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="analytics_channels"),
                    InlineKeyboardButton("üí¨ –î–∏–∞–ª–æ–≥–∏", callback_data="analytics_dialogues")
                ],
                [
                    InlineKeyboardButton("üë• –í–æ—Ä–æ–Ω–∫–∞ –ª–∏–¥–æ–≤", callback_data="analytics_funnel"),
                    InlineKeyboardButton("üìä –¢—Ä–µ–Ω–¥—ã", callback_data="analytics_trends")
                ],
                [
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_menu"),
                    InlineKeyboardButton("üìã –û—Ç—á–µ—Ç—ã", callback_data="analytics_reports")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dashboard_refresh"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="analytics_settings")
                ]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dashboard: {e}")

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    async def _get_peak_load(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
        return 450.0  # –ó–∞–≥–ª—É—à–∫–∞

    async def _get_memory_usage(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        return "245 MB / 512 MB (47.9%)"  # –ó–∞–≥–ª—É—à–∫–∞

    async def _get_db_size(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ë–î"""
        return "128.5 MB"  # –ó–∞–≥–ª—É—à–∫–∞

    async def _get_active_connections(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return 12  # –ó–∞–≥–ª—É—à–∫–∞

    async def _get_cache_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        return "1,247 –∑–∞–ø–∏—Å–µ–π"  # –ó–∞–≥–ª—É—à–∫–∞

    async def _get_performance_warnings(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return "‚Ä¢ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ë–î –≤ 14:00-16:00"  # –ó–∞–≥–ª—É—à–∫–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è dashboard
def create_analytics_dashboard(config: Dict[str, Any]) -> AnalyticsDashboard:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ dashboard"""
    return AnalyticsDashboard(config)