"""
myparser/main_parser.py - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AI –ø–∞—Ä—Å–µ—Ä
–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–´ –í–°–ï –û–®–ò–ë–ö–ò
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any, Tuple
from dataclasses import dataclass
from telegram import Update, User
from telegram.ext import ContextTypes

from database.operations import create_lead, update_channel_stats
from database.models import Lead
from ai.claude_client import get_claude_client

logger = logging.getLogger(__name__)

# === –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ===

@dataclass
class DialogueParticipant:
    """–£—á–∞—Å—Ç–Ω–∏–∫ –¥–∏–∞–ª–æ–≥–∞"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    role: str = "participant"
    message_count: int = 0
    first_message_time: Optional[datetime] = None
    last_message_time: Optional[datetime] = None
    engagement_level: str = "low"
    buying_signals_count: int = 0
    influence_score: int = 0
    lead_probability: float = 0.0

    @property
    def display_name(self) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        return self.first_name or f"User_{self.user_id}"

@dataclass
class DialogueMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ"""
    user_id: int
    username: Optional[str]
    text: str
    timestamp: datetime
    message_id: int
    reply_to_message_id: Optional[int] = None
    reply_to_user_id: Optional[int] = None
    buying_signals: List[str] = None
    sentiment: str = "neutral"
    urgency_level: str = "none"

@dataclass
class DialogueContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞"""
    dialogue_id: str
    channel_id: int
    channel_title: str
    participants: Dict[int, DialogueParticipant]
    messages: List[DialogueMessage]
    start_time: datetime
    last_activity: datetime
    topic: Optional[str] = None
    dialogue_type: str = "discussion"
    is_business_related: bool = False
    overall_sentiment: str = "neutral"
    decision_stage: str = "awareness"
    group_buying_probability: float = 0.0

@dataclass
class DialogueAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
    dialogue_id: str
    is_valuable_dialogue: bool
    confidence_score: int
    potential_leads: List[Dict[str, Any]]
    business_relevance_score: int
    dialogue_summary: str
    key_insights: List[str]
    recommended_actions: List[str]
    next_best_action: str
    estimated_timeline: Optional[str]
    group_budget_estimate: Optional[str]
    participant_analysis: Dict[int, Dict[str, Any]]

@dataclass
class UserContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    messages: List[Dict[str, Any]]
    first_seen: datetime
    last_activity: datetime
    channel_info: Dict[str, Any]

@dataclass
class AIAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç AI –∞–Ω–∞–ª–∏–∑–∞"""
    is_lead: bool
    confidence_score: int
    lead_quality: str
    interests: List[str]
    buying_signals: List[str]
    urgency_level: str
    recommended_action: str
    key_insights: List[str]
    estimated_budget: Optional[str]
    timeline: Optional[str]
    pain_points: List[str]
    decision_stage: str

@dataclass
class MessageWindow:
    """–û–∫–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    messages: List[Dict[str, Any]]
    timespan: timedelta
    unique_users: set
    has_replies: bool
    has_business_signals: bool
    conversation_type: str  # "individual", "dialogue", "group_chat"

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª–∞—Å—Å—ã
@dataclass
class ParticipantInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    
    @property
    def display_name(self) -> str:
        return self.first_name or f"User_{self.user_id}"

@dataclass
class MessageInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    text: str
    timestamp: datetime
    channel_id: int
    user_id: int

# === –£–ú–ù–´–ô –¢–†–ï–ö–ï–† –î–ò–ê–õ–û–ì–û–í ===

class SmartDialogueTracker:
    """–£–º–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ–∫–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, config):
        self.config = config
        self.active_dialogues: Dict[str, DialogueContext] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –æ–∫–Ω–∞
        self.message_window_size = 10  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dialogue_detection_window = timedelta(minutes=15)  # 15 –º–∏–Ω—É—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.max_gap_between_messages = timedelta(minutes=5)  # –ú–∞–∫—Å. –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        self.dialogue_timeout = timedelta(minutes=20)  # –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 20 –º–∏–Ω –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
        self.min_participants = 2
        self.min_messages = 2
        
        # –ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
        self.channel_message_cache: Dict[int, List[Dict[str, Any]]] = {}
        
        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.business_signals = [
            '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å', '–∫–∞–∫–∞—è —Ü–µ–Ω–∞', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
            '–Ω—É–∂–µ–Ω –±–æ—Ç', '–∑–∞–∫–∞–∑–∞—Ç—å crm', '—Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ', '–±—é–¥–∂–µ—Ç',
            '–ø–æ–∫—É–ø–∞–µ–º', '–ø–ª–∞–Ω–∏—Ä—É–µ–º –∫—É–ø–∏—Ç—å', '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É',
            'crm —Å–∏—Å—Ç–µ–º–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'
        ]
        
        logger.info("SmartDialogueTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """–£–ú–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            chat_id = update.effective_chat.id
            user = update.effective_user
            message = update.message
            
            if not user or not message or not message.text:
                return None
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫—ç—à
            self._add_message_to_cache(chat_id, {
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'text': message.text,
                'timestamp': datetime.now(),
                'message_id': message.message_id,
                'reply_to_message_id': message.reply_to_message.message_id if message.reply_to_message else None,
                'reply_to_user_id': message.reply_to_message.from_user.id if message.reply_to_message else None
            })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∫–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            window = self._analyze_message_window(chat_id)
            
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –æ–∫–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:")
            logger.info(f"    üìä –¢–∏–ø —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {window.conversation_type}")
            logger.info(f"    üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(window.unique_users)}")
            logger.info(f"    üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∫–Ω–µ: {len(window.messages)}")
            logger.info(f"    üè¢ –ë–∏–∑–Ω–µ—Å-—Å–∏–≥–Ω–∞–ª—ã: {window.has_business_signals}")
            logger.info(f"    ‚Ü©Ô∏è –ï—Å—Ç—å –æ—Ç–≤–µ—Ç—ã: {window.has_replies}")
            
            # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            await self._cleanup_expired_dialogues()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if window.conversation_type == "individual":
                logger.info("üì± –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ")
                return None
            
            elif window.conversation_type in ["dialogue", "group_chat"]:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥
                existing_dialogue = self._find_relevant_dialogue(chat_id, window)
                
                if existing_dialogue:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –¥–∏–∞–ª–æ–≥—É
                    await self._add_message_to_dialogue(existing_dialogue, user, message)
                    logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –¥–∏–∞–ª–æ–≥—É {existing_dialogue.dialogue_id}")
                    return existing_dialogue.dialogue_id
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
                    new_dialogue = await self._create_smart_dialogue(chat_id, update.effective_chat.title, window)
                    logger.info(f"üÜï –°–æ–∑–¥–∞–Ω —É–º–Ω—ã–π –¥–∏–∞–ª–æ–≥: {new_dialogue.dialogue_id}")
                    return new_dialogue.dialogue_id
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None

    def _add_message_to_cache(self, chat_id: int, message_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫—ç—à –∫–∞–Ω–∞–ª–∞"""
        if chat_id not in self.channel_message_cache:
            self.channel_message_cache[chat_id] = []
        
        cache = self.channel_message_cache[chat_id]
        cache.append(message_data)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(cache) > self.message_window_size * 2:
            cache[:] = cache[-self.message_window_size:]

    def _analyze_message_window(self, chat_id: int) -> MessageWindow:
        """–ê–Ω–∞–ª–∏–∑ –æ–∫–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        cache = self.channel_message_cache.get(chat_id, [])
        
        if not cache:
            return MessageWindow([], timedelta(0), set(), False, False, "individual")
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
        now = datetime.now()
        recent_messages = []
        
        for msg in reversed(cache):
            msg_time = msg['timestamp']
            if now - msg_time <= self.dialogue_detection_window:
                recent_messages.insert(0, msg)
            else:
                break
        
        if not recent_messages:
            return MessageWindow([], timedelta(0), set(), False, False, "individual")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–∫–Ω–∞
        unique_users = set(msg['user_id'] for msg in recent_messages)
        has_replies = any(msg.get('reply_to_message_id') for msg in recent_messages)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–∑–Ω–µ—Å-—Å–∏–≥–Ω–∞–ª—ã
        all_text = ' '.join(msg['text'].lower() for msg in recent_messages)
        has_business_signals = any(signal in all_text for signal in self.business_signals)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑–º–∞—Ö
        if len(recent_messages) > 1:
            timespan = recent_messages[-1]['timestamp'] - recent_messages[0]['timestamp']
        else:
            timespan = timedelta(0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conversation_type = self._determine_conversation_type(recent_messages, unique_users, has_replies, timespan)
        
        return MessageWindow(
            messages=recent_messages,
            timespan=timespan,
            unique_users=unique_users,
            has_replies=has_replies,
            has_business_signals=has_business_signals,
            conversation_type=conversation_type
        )

    def _determine_conversation_type(self, messages: List[Dict], unique_users: set, has_replies: bool, timespan: timedelta) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        num_users = len(unique_users)
        num_messages = len(messages)
        
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if num_users == 1:
            return "individual"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        user_message_counts = {}
        for msg in messages:
            user_id = msg['user_id']
            user_message_counts[user_id] = user_message_counts.get(user_id, 0) + 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        active_users = sum(1 for count in user_message_counts.values() if count >= 2)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        quick_responses = 0
        for i in range(1, len(messages)):
            prev_msg = messages[i-1]
            curr_msg = messages[i]
            
            time_diff = curr_msg['timestamp'] - prev_msg['timestamp']
            different_users = prev_msg['user_id'] != curr_msg['user_id']
            
            if different_users and time_diff <= timedelta(minutes=2):
                quick_responses += 1
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        if num_users == 2:
            if has_replies or quick_responses >= 1 or active_users >= 2:
                return "dialogue"
            else:
                return "individual"
        
        elif num_users >= 3:
            if quick_responses >= 2 or active_users >= 3:
                return "group_chat"
            elif active_users >= 2:
                return "dialogue"
            else:
                return "individual"
        
        return "individual"

    def _find_relevant_dialogue(self, chat_id: int, window: MessageWindow) -> Optional[DialogueContext]:
        """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ–∫–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        for dialogue in self.active_dialogues.values():
            if dialogue.channel_id != chat_id:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–∏–∑–æ—Å—Ç—å
            time_since_last_activity = datetime.now() - dialogue.last_activity
            if time_since_last_activity > self.dialogue_timeout:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            dialogue_participants = set(dialogue.participants.keys())
            window_participants = window.unique_users
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            if dialogue_participants & window_participants:
                logger.info(f"üîó –ù–∞–π–¥–µ–Ω —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ {dialogue.dialogue_id}")
                return dialogue
        
        return None

    async def _create_smart_dialogue(self, chat_id: int, chat_title: str, window: MessageWindow) -> DialogueContext:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–∫–Ω–∞"""
        
        start_time = datetime.now()
        dialogue_id = self._generate_dialogue_id(chat_id, start_time)
        
        # –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ–∫–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        participants = {}
        for msg in window.messages:
            user_id = msg['user_id']
            if user_id not in participants:
                participants[user_id] = DialogueParticipant(
                    user_id=user_id,
                    username=msg.get('username'),
                    first_name=msg.get('first_name'),
                    last_name=msg.get('last_name'),
                    role="participant",
                    message_count=0,
                    first_message_time=msg['timestamp'],
                    last_message_time=msg['timestamp']
                )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        self._assign_participant_roles(participants, window)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
        dialogue = DialogueContext(
            dialogue_id=dialogue_id,
            channel_id=chat_id,
            channel_title=chat_title or f"Channel_{chat_id}",
            participants=participants,
            messages=[],
            start_time=start_time,
            last_activity=start_time,
            is_business_related=window.has_business_signals,
            dialogue_type=window.conversation_type
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–∫–Ω–∞ –∫ –¥–∏–∞–ª–æ–≥—É
        for msg in window.messages:
            await self._add_cached_message_to_dialogue(dialogue, msg)
        
        self.active_dialogues[dialogue_id] = dialogue
        return dialogue

    def _assign_participant_roles(self, participants: Dict[int, DialogueParticipant], window: MessageWindow):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_activity = {}
        for msg in window.messages:
            user_id = msg['user_id']
            if user_id not in user_activity:
                user_activity[user_id] = {
                    'message_count': 0,
                    'business_signals': 0,
                    'questions': 0,
                    'first_message_time': msg['timestamp']
                }
            
            activity = user_activity[user_id]
            activity['message_count'] += 1
            
            text_lower = msg['text'].lower()
            
            # –°—á–∏—Ç–∞–µ–º –±–∏–∑–Ω–µ—Å-—Å–∏–≥–Ω–∞–ª—ã
            for signal in self.business_signals:
                if signal in text_lower:
                    activity['business_signals'] += 1
            
            # –°—á–∏—Ç–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
            if '?' in msg['text'] or any(word in text_lower for word in ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞']):
                activity['questions'] += 1
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏
        sorted_users = sorted(user_activity.items(), key=lambda x: x[1]['message_count'], reverse=True)
        
        for i, (user_id, activity) in enumerate(sorted_users):
            participant = participants[user_id]
            
            if i == 0:  # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π
                if activity['business_signals'] > 0:
                    participant.role = "initiator"
                else:
                    participant.role = "active_participant"
            elif activity['business_signals'] > 0:
                participant.role = "interested_participant"
            elif activity['questions'] > 0:
                participant.role = "inquirer"
            else:
                participant.role = "participant"

    async def _add_cached_message_to_dialogue(self, dialogue: DialogueContext, msg_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –¥–∏–∞–ª–æ–≥—É"""
        user_id = msg_data['user_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if user_id in dialogue.participants:
            participant = dialogue.participants[user_id]
            participant.message_count += 1
            participant.last_message_time = msg_data['timestamp']
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            buying_signals = self._extract_buying_signals(msg_data['text'])
            if buying_signals:
                participant.buying_signals_count += len(buying_signals)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        dialogue_message = DialogueMessage(
            user_id=user_id,
            username=msg_data.get('username'),
            text=msg_data['text'],
            timestamp=msg_data['timestamp'],
            message_id=msg_data['message_id'],
            reply_to_message_id=msg_data.get('reply_to_message_id'),
            reply_to_user_id=msg_data.get('reply_to_user_id'),
            buying_signals=self._extract_buying_signals(msg_data['text']),
            urgency_level=self._detect_urgency(msg_data['text'])
        )
        
        dialogue.messages.append(dialogue_message)
        dialogue.last_activity = msg_data['timestamp']

    async def _add_message_to_dialogue(self, dialogue: DialogueContext, user: User, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –¥–∏–∞–ª–æ–≥—É"""
        current_time = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if user.id not in dialogue.participants:
            participant = DialogueParticipant(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                role="new_participant",
                message_count=1,
                first_message_time=current_time,
                last_message_time=current_time
            )
            dialogue.participants[user.id] = participant
        else:
            participant = dialogue.participants[user.id]
            participant.message_count += 1
            participant.last_message_time = current_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        buying_signals = self._extract_buying_signals(message.text)
        if buying_signals:
            participant.buying_signals_count += len(buying_signals)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        dialogue_message = DialogueMessage(
            user_id=user.id,
            username=user.username,
            text=message.text,
            timestamp=current_time,
            message_id=message.message_id,
            reply_to_message_id=message.reply_to_message.message_id if message.reply_to_message else None,
            reply_to_user_id=message.reply_to_message.from_user.id if message.reply_to_message else None,
            buying_signals=buying_signals,
            urgency_level=self._detect_urgency(message.text)
        )
        
        dialogue.messages.append(dialogue_message)
        dialogue.last_activity = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if buying_signals or self._has_business_signals(message.text):
            dialogue.is_business_related = True

    def _generate_dialogue_id(self, channel_id: int, start_time: datetime) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–∏–∞–ª–æ–≥–∞"""
        return f"dialogue_{channel_id}_{start_time.strftime('%Y%m%d_%H%M%S')}"

    def _extract_buying_signals(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []
        text_lower = text.lower()
        
        signal_patterns = {
            'price_inquiry': ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç'],
            'purchase_intent': ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ö–æ—á—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏'],
            'urgency': ['—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '—Å–µ–≥–æ–¥–Ω—è'],
            'budget_discussion': ['–±—é–¥–∂–µ—Ç', '–≥–æ—Ç–æ–≤ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å'],
            'service_specific': ['–Ω—É–∂–µ–Ω –±–æ—Ç', 'crm —Å–∏—Å—Ç–µ–º–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è']
        }
        
        for category, patterns in signal_patterns.items():
            for pattern in patterns:
                if pattern in text_lower:
                    signals.append(f"{category}: {pattern}")
        
        return signals

    def _detect_urgency(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['—Å—Ä–æ—á–Ω–æ', '—Å–µ–π—á–∞—Å', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ']):
            return "immediate"
        elif any(word in text_lower for word in ['–±—ã—Å—Ç—Ä–æ', '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞']):
            return "high"
        elif any(word in text_lower for word in ['–Ω–∞ –¥–Ω—è—Ö', '—Å–∫–æ—Ä–æ']):
            return "medium"
        else:
            return "none"

    def _has_business_signals(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∏–∑–Ω–µ—Å-—Å–∏–≥–Ω–∞–ª–æ–≤"""
        text_lower = text.lower()
        return any(signal in text_lower for signal in self.business_signals)

    async def _cleanup_expired_dialogues(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        current_time = datetime.now()
        expired_dialogues = []
        
        for dialogue_id, dialogue in self.active_dialogues.items():
            if current_time - dialogue.last_activity > self.dialogue_timeout:
                expired_dialogues.append(dialogue_id)
        
        for dialogue_id in expired_dialogues:
            completed_dialogue = self.active_dialogues.pop(dialogue_id)
            logger.info(f"üèÅ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {dialogue_id} ({len(completed_dialogue.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(completed_dialogue.participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)")

    def should_trigger_immediate_analysis(self, dialogue_id: str, message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –°–ò–õ–¨–ù–´–• —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        text_lower = message_text.lower()
        
        # –°–ò–õ–¨–ù–´–ï —Ç—Ä–∏–≥–≥–µ—Ä—ã - —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        strong_triggers = [
            # –ü—Ä—è–º—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
            '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å', '–≥–æ—Ç–æ–≤—ã –∫—É–ø–∏—Ç—å', '–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–∫–∞–∑–∞—Ç—å',
            '–Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å', '–±—É–¥–µ–º –ø–æ–∫—É–ø–∞—Ç—å', '–∑–∞–∫–∞–∂–µ–º', '–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–º',
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã –∏ —Ü–µ–Ω—ã
            '–±—é–¥–∂–µ—Ç', '—Ç—ã—Å—è—á', '–º–∏–ª–ª–∏–æ–Ω', '—Ä—É–±–ª–µ–π', '–¥–æ–ª–ª–∞—Ä–æ–≤', '–µ–≤—Ä–æ',
            '100', '200', '500', '1000', '10000', '–∫–∫–∫', '–º–ª–Ω', '—Ç—ã—Å',
            '–≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å', '–≤—ã–¥–µ–ª–∏–ª–∏', '–∑–∞–ª–æ–∂–∏–ª–∏ –≤ –±—é–¥–∂–µ—Ç',
            
            # –ü—Ä—è–º—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–∫–∞–∫–∞—è —Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥', '–ø—Ä–∞–π—Å', '—Ä–∞—Å—Ü–µ–Ω–∫–∏',
            '–≤–æ —Å–∫–æ–ª—å–∫–æ –æ–±–æ–π–¥–µ—Ç—Å—è', '—Ü–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞',
            
            # –°—Ä–æ—á–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏
            '—Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ', '–Ω—É–∂–Ω–æ —Å–µ–≥–æ–¥–Ω—è', '–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É', '–¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞',
            '–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', '–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ', '–≥–æ—Ä—è—â–∏–π –ø—Ä–æ–µ–∫—Ç',
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å)
            '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å', '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫', 'api', '—Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
            '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
            
            # –ü—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            '–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å', '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É', '–Ω–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', '–ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä',
            '–∫–æ–≥–¥–∞ –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å', '—Å—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏', '—ç—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        has_strong_trigger = any(trigger in text_lower for trigger in strong_triggers)
        
        if has_strong_trigger:
            logger.info(f"üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω –°–ò–õ–¨–ù–´–ô —Ç—Ä–∏–≥–≥–µ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: '{message_text[:50]}...'")
        
        return has_strong_trigger

    def get_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å —É–º–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞"""
        return {
            'active_dialogues': len(self.active_dialogues),
            'min_participants': self.min_participants,
            'min_messages': self.min_messages,
            'dialogue_timeout_minutes': self.dialogue_timeout.total_seconds() / 60,
            'message_window_size': self.message_window_size,
            'detection_window_minutes': self.dialogue_detection_window.total_seconds() / 60,
            'cached_channels': len(self.channel_message_cache)
        }

# === –ê–ù–ê–õ–ò–ó–ê–¢–û–† –î–ò–ê–õ–û–ì–û–í ===

class DialogueAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, config):
        self.config = config
        self.claude_client = get_claude_client()
        logger.info("DialogueAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def analyze_dialogue(self, dialogue: DialogueContext) -> Optional[DialogueAnalysisResult]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ {dialogue.dialogue_id}")
            
            if self.claude_client and self.claude_client.client:
                return await self._ai_dialogue_analysis(dialogue)
            else:
                logger.warning("Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                return self._simple_dialogue_analysis(dialogue)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return self._simple_dialogue_analysis(dialogue)

    async def _ai_dialogue_analysis(self, dialogue: DialogueContext) -> DialogueAnalysisResult:
        """AI –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        participants_info = []
        user_ids = []  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id
        
        for user_id, participant in dialogue.participants.items():
            user_ids.append(user_id)  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            info = f"–£—á–∞—Å—Ç–Ω–∏–∫ {participant.first_name} (@{participant.username or '–±–µ–∑_username'}): {participant.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, {participant.buying_signals_count} –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
            participants_info.append(info)
        
        messages_history = []
        for msg in dialogue.messages:
            timestamp = msg.timestamp.strftime("%H:%M")
            username = msg.username or f"user_{msg.user_id}"
            messages_history.append(f"[{timestamp}] {username}: {msg.text}")
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä—É–ø–ø–æ–≤–æ–π –¥–∏–∞–ª–æ–≥ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.

–ö–û–ù–¢–ï–ö–°–¢:
- –ö–∞–Ω–∞–ª: {dialogue.channel_title}
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(dialogue.last_activity - dialogue.start_time).total_seconds() / 60:.1f} –º–∏–Ω
- –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(dialogue.participants)}
- –°–æ–æ–±—â–µ–Ω–∏–π: {len(dialogue.messages)}

–£–ß–ê–°–¢–ù–ò–ö–ò:
{chr(10).join(participants_info)}

–î–ò–ê–õ–û–ì:
{chr(10).join(messages_history)}

–í–ê–ñ–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –≤ potential_leads –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏—Ö —Ä–µ–∞–ª—å–Ω—ã–º–∏ user_id: {user_ids}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{{
    "is_valuable_dialogue": true/false,
    "confidence_score": —á–∏—Å–ª–æ_0_100,
    "business_relevance_score": —á–∏—Å–ª–æ_0_100,
    "potential_leads": [
        {{
            "user_id": –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π_user_id_–∏–∑_—Å–ø–∏—Å–∫–∞,
            "lead_probability": —á–∏—Å–ª–æ_0_100,
            "lead_quality": "hot/warm/cold",
            "key_signals": ["—Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"],
            "role_in_decision": "decision_maker/influencer/observer/budget_holder"
        }}
    ],
    "dialogue_summary": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "key_insights": ["–∏–Ω—Å–∞–π—Ç—ã"],
    "recommended_actions": ["–¥–µ–π—Å—Ç–≤–∏—è"],
    "next_best_action": "—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥",
    "estimated_timeline": "—Å—Ä–æ–∫–∏ –∏–ª–∏ null",
    "group_budget_estimate": "–±—é–¥–∂–µ—Ç –∏–ª–∏ null"
}}"""

        try:
            response = await asyncio.wait_for(
                self.claude_client.client.messages.create(
                    model=self.claude_client.model,
                    max_tokens=3000,
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.1
                ),
                timeout=20.0
            )
      
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            response_text = response.content[0].text
            return self._parse_ai_response(response_text, dialogue)
     
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._simple_dialogue_analysis(dialogue)

    def _parse_ai_response(self, response_text: str, dialogue: DialogueContext) -> DialogueAnalysisResult:
        """–ü–∞—Ä—Å–∏–Ω–≥ AI –æ—Ç–≤–µ—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            import re
            logger.info(f"üîç RAW AI RESPONSE: {response_text[:500]}...")  # –î–û–ë–ê–í–ò–¢–¨
            
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if not json_match:
                logger.error("‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AI –æ—Ç–≤–µ—Ç–µ")  # –î–û–ë–ê–í–ò–¢–¨
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            json_text = json_match.group()
            logger.info(f"üìÑ EXTRACTED JSON: {json_text[:200]}...")  # –î–û–ë–ê–í–ò–¢–¨
            
            data = json.loads(json_text)
            logger.info(f"‚úÖ PARSED DATA: {data}")  # –î–û–ë–ê–í–ò–¢–¨
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participant_analysis = {}
            potential_leads = data.get('potential_leads', [])
            
            logger.info(f"üë• POTENTIAL LEADS FROM AI: {potential_leads}")  # –î–û–ë–ê–í–ò–¢–¨
            
            for lead_data in potential_leads:
                user_id = lead_data.get('user_id')
                if not user_id:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω lead –±–µ–∑ user_id: {lead_data}")
                    continue
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                if user_id in dialogue.participants:
                    participant = dialogue.participants[user_id]
                    lead_prob = lead_data.get('lead_probability', 0)
                    participant.lead_probability = lead_prob / 100.0
                    
                    participant_analysis[user_id] = {
                        'lead_probability': lead_prob,
                        'lead_quality': lead_data.get('lead_quality', 'cold'),
                        'key_signals': lead_data.get('key_signals', []),
                        'role_in_decision': lead_data.get('role_in_decision', 'observer')
                    }
                    
                    logger.info(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {lead_prob}% ({lead_data.get('role_in_decision')})")
                else:
                    logger.warning(f"‚ö†Ô∏è User {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞")
            
            result = DialogueAnalysisResult(
                dialogue_id=dialogue.dialogue_id,
                is_valuable_dialogue=data.get('is_valuable_dialogue', False),
                confidence_score=data.get('confidence_score', 0),
                potential_leads=potential_leads,
                business_relevance_score=data.get('business_relevance_score', 0),
                dialogue_summary=data.get('dialogue_summary', ''),
                key_insights=data.get('key_insights', []),
                recommended_actions=data.get('recommended_actions', []),
                next_best_action=data.get('next_best_action', ''),
                estimated_timeline=data.get('estimated_timeline'),
                group_budget_estimate=data.get('group_budget_estimate'),
                participant_analysis=participant_analysis
            )
            
            logger.info(f"üéØ FINAL ANALYSIS RESULT: valuable={result.is_valuable_dialogue}, leads_count={len(result.potential_leads)}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞: {e}")
            logger.error(f"üìÑ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç: {response_text[:200]}...")
            return self._simple_dialogue_analysis(dialogue)

    def _simple_dialogue_analysis(self, dialogue: DialogueContext) -> DialogueAnalysisResult:
        """–£—Å–∏–ª–µ–Ω–Ω—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        potential_leads = []
        participant_analysis = {}
        
        logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –£–õ–£–ß–®–ï–ù–ù–´–ô –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞")
        
        for user_id, participant in dialogue.participants.items():
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            user_messages = [msg for msg in dialogue.messages if msg.user_id == user_id]
            
            # –°—á–∏—Ç–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            buying_signals = 0
            strong_signals = []
            
            for msg in user_messages:
                text_lower = msg.text.lower()
                
                # –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–ï —Å–∏–≥–Ω–∞–ª—ã
                if any(signal in text_lower for signal in ['—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å', '–Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å']):
                    buying_signals += 5  # –£–í–ï–õ–ò–ß–ò–õ–ò –≤–µ—Å
                    strong_signals.append('direct_purchase_intent')
                
                # –ë—é–¥–∂–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                if any(signal in text_lower for signal in ['–∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–±—é–¥–∂–µ—Ç']):
                    buying_signals += 4  # –£–í–ï–õ–ò–ß–ò–õ–ò –≤–µ—Å
                    strong_signals.append('budget_inquiry')
                
                # –¶–µ–Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                if any(signal in text_lower for signal in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
                    buying_signals += 3
                    strong_signals.append('price_inquiry')
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
                if any(signal in text_lower for signal in ['–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '—Ç–≥-–±–æ—Ç', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º']):
                    buying_signals += 2
                    strong_signals.append('technical_interest')
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä
            message_count_factor = min(participant.message_count * 15, 35)  # –£–í–ï–õ–ò–ß–ò–õ–ò –≤–µ—Å
            buying_signals_factor = min(buying_signals * 15, 70)  # –£–í–ï–õ–ò–ß–ò–õ–ò –≤–µ—Å
            
            score = message_count_factor + buying_signals_factor
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            if buying_signals >= 5:
                role = 'decision_maker'
                quality = 'hot'
                score = max(score, 85)  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø—Ä—è–º—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π
            elif any('–±—é–¥–∂–µ—Ç' in msg.text.lower() for msg in user_messages):
                role = 'budget_holder'
                quality = 'warm'
                score = max(score, 70)  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –±—é–¥–∂–µ—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            elif buying_signals >= 2:
                role = 'interested_participant'
                quality = 'warm'
                score = max(score, 60)
            elif buying_signals >= 1:
                role = 'inquirer'
                quality = 'cold'
                score = max(score, 40)
            else:
                role = 'observer'
                quality = 'cold'
                score = max(score, 25)  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            participant.lead_probability = score / 100.0
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ–∑–¥–∞–µ–º –ª–∏–¥–æ–≤ –¥–ª—è –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
            if score >= 35:  # –ü–û–ù–ò–ó–ò–õ–ò –ø–æ—Ä–æ–≥ —Å 40 –¥–æ 35
                potential_leads.append({
                    'user_id': user_id,
                    'lead_probability': score,
                    'lead_quality': quality,
                    'key_signals': strong_signals,
                    'role_in_decision': role
                })
                
                participant_analysis[user_id] = {
                    'lead_probability': score,
                    'lead_quality': quality,
                    'key_signals': strong_signals,
                    'role_in_decision': role
                }
                
                logger.info(f"‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó - –£—á–∞—Å—Ç–Ω–∏–∫ {participant.display_name}: {score}% ({role})")
        
        logger.info(f"üéØ –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù: –Ω–∞–π–¥–µ–Ω–æ {len(potential_leads)} –ª–∏–¥–æ–≤")
        
        return DialogueAnalysisResult(
            dialogue_id=dialogue.dialogue_id,
            is_valuable_dialogue=len(potential_leads) > 0,
            confidence_score=85 if any(lead['lead_probability'] >= 70 for lead in potential_leads) else 65,
            potential_leads=potential_leads,
            business_relevance_score=90 if dialogue.is_business_related else 30,
            dialogue_summary=f"–î–∏–∞–ª–æ–≥ —Å {len(dialogue.participants)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ {dialogue.channel_title}",
            key_insights=[f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(potential_leads)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤", "–í—ã—è–≤–ª–µ–Ω—ã –ø—Ä—è–º—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è"],
            recommended_actions=["–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å decision_maker", "–£—Ç–æ—á–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"],
            next_best_action="–°–≤—è–∑–∞—Ç—å—Å—è —Å –≥–ª–∞–≤–Ω—ã–º –ª–∏–¥–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç",
            estimated_timeline="–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ", 
            group_budget_estimate="—Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è —É decision_maker",
            participant_analysis=participant_analysis
        )
# === –ì–õ–ê–í–ù–´–ô –ü–ê–†–°–ï–† –° –£–ú–ù–´–ú –ê–ù–ê–õ–ò–ó–û–ú ===

class UnifiedAIParser:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π AI –ø–∞—Ä—Å–µ—Ä —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, config):
        self.config = config
        self.parsing_config = config.get('parsing', {})
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enabled = self.parsing_config.get('enabled', True)
        self.channels = self._parse_channels()
        self.min_confidence_score = self.parsing_config.get('min_confidence_score', 70)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —É–º–Ω—ã–º —Ç—Ä–µ–∫–µ—Ä–æ–º
        self.dialogue_analysis_enabled = self.parsing_config.get('dialogue_analysis_enabled', True)
        self.dialogue_tracker = SmartDialogueTracker(config) if self.dialogue_analysis_enabled else None
        self.dialogue_analyzer = DialogueAnalyzer(config) if self.dialogue_analysis_enabled else None
        
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self.user_contexts: Dict[int, UserContext] = {}
        self.processed_leads: Dict[int, datetime] = {}
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –∞–Ω–∞–ª–∏–∑–æ–≤ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π
        self.dialogue_analysis_history: Dict[str, List[datetime]] = {}
        self.analysis_cooldown = timedelta(seconds=30)  # –ö–æ—Ä–æ—Ç–∫–∏–π cooldown –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤

        logger.info(f"UnifiedAIParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"  - –ö–∞–Ω–∞–ª–æ–≤: {len(self.channels)}")
        logger.info(f"  - –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {self.dialogue_analysis_enabled}")
        logger.info(f"  - –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence_score}%")
        logger.info(f"  - –°—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: confidence‚â•70%, business‚â•75%, leads‚â•60%")
        logger.info(f"  - –£–ª—å—Ç—Ä–∞-—É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ cooldown —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏")

    def _parse_channels(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤"""
        channels_raw = self.parsing_config.get('channels', [])
        if isinstance(channels_raw, list):
            return [str(ch) for ch in channels_raw]
        elif isinstance(channels_raw, (str, int)):
            return [str(channels_raw)]
        return []

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            if not self.enabled:
                return
            
            chat_id = update.effective_chat.id
            user = update.effective_user
            message = update.message
            
            if not user or not message or not message.text:
                return
            
            logger.info(f"üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            logger.info(f"    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})")
            logger.info(f"    üí¨ –¢–µ–∫—Å—Ç: '{message.text[:50]}...'")
            logger.info(f"    üìç –ö–∞–Ω–∞–ª: {chat_id}")
            
            if not self.is_channel_monitored(chat_id, update.effective_chat.username):
                logger.info("‚è≠Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                return
            
            # –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
            dialogue_processed = False
            
            if self.dialogue_analysis_enabled and self.dialogue_tracker:
                dialogue_id = await self.dialogue_tracker.process_message(update, context)
                
                if dialogue_id:
                    logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –¥–∏–∞–ª–æ–≥–µ: {dialogue_id}")
                    dialogue_processed = True  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
                    if await self._should_analyze_dialogue_smart(dialogue_id, message.text):
                        logger.info(f"üî• –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}!")
                        await self._analyze_dialogue_immediately(dialogue_id, context)
                    else:
                        logger.info(f"‚è∏Ô∏è –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id} –æ—Ç–ª–æ–∂–µ–Ω (–Ω–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è)")
            
            # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –≤ –¥–∏–∞–ª–æ–≥–µ
            if not dialogue_processed:
                logger.info("üë§ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞)")
                await self._process_individual_message(update, context)
            else:
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –¥–∏–∞–ª–æ–≥–∞, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω—É–∂–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ: {e}")

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥
    async def _process_individual_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user = update.effective_user
            message = update.message
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            participant = ParticipantInfo(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            message_info = MessageInfo(
                text=message.text,
                timestamp=datetime.now(),
                channel_id=update.effective_chat.id,
                user_id=user.id
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._analyze_individual_message(participant, message_info, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _analyze_individual_message(self, participant: ParticipantInfo, message: MessageInfo, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—å—Ç—Ä–∞-—Å–∏–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            if self._check_ultra_strong_triggers(message.text):
                logger.info(f"üî•üî• –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–ô —Ç—Ä–∏–≥–≥–µ—Ä –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {participant.display_name}")
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏–¥ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                lead_data = {
                    'lead_probability': 95,
                    'lead_quality': 'hot',
                    'key_signals': ['direct_purchase_intent'],
                    'participant_role': 'client'
                }
                
                lead = await self._create_individual_lead(participant, message, lead_data)
                if lead:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self._notify_admins_about_individual_ultra_trigger(context, participant, message, lead_data)
                
                return
            
            # –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self._contains_business_signals(message.text):
                logger.info(f"üíº –ë–∏–∑–Ω–µ—Å-—Å–∏–≥–Ω–∞–ª—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {participant.display_name}")
                
                lead_data = {
                    'lead_probability': 70,
                    'lead_quality': 'warm',
                    'key_signals': ['business_interest'],
                    'participant_role': 'prospect'
                }
                
                await self._create_individual_lead(participant, message, lead_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥
    def _contains_business_signals(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∏–∑–Ω–µ—Å-—Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        business_signals = [
            '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å', '–∫–∞–∫–∞—è —Ü–µ–Ω–∞', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
            '–Ω—É–∂–µ–Ω –±–æ—Ç', '–∑–∞–∫–∞–∑–∞—Ç—å crm', '—Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ', '–±—é–¥–∂–µ—Ç',
            '–ø–æ–∫—É–ø–∞–µ–º', '–ø–ª–∞–Ω–∏—Ä—É–µ–º –∫—É–ø–∏—Ç—å', '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É',
            'crm —Å–∏—Å—Ç–µ–º–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'
        ]
        
        text_lower = text.lower()
        return any(signal in text_lower for signal in business_signals)

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –º–µ—Ç–æ–¥
    async def _create_individual_lead(self, participant: ParticipantInfo, message: MessageInfo, analysis_result) -> Optional[Lead]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–æ—Ä–∞
            score = 50  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä
            if self._contains_business_signals(message.text):
                score += 30
            if self._check_ultra_strong_triggers(message.text):
                score = 90
            
            lead = Lead(
                telegram_id=participant.user_id,
                username=participant.username,
                first_name=participant.first_name,
                last_name=participant.last_name,
                source_channel=f"Channel_{message.channel_id}",
                interest_score=score,
                message_text=message.text,
                message_date=message.timestamp,
                lead_quality="hot" if score >= 80 else "warm" if score >= 60 else "cold",
                urgency_level="high" if self._check_ultra_strong_triggers(message.text) else "medium",
                notes="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏"
            )
            
            await create_lead(lead)
            logger.info(f"‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–∏–¥ —Å–æ–∑–¥–∞–Ω: {participant.display_name}")
            return lead
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–∞: {e}")
            return None

    async def _should_analyze_dialogue_smart(self, dialogue_id: str, message_text: str) -> bool:
        """–£–ª—å—Ç—Ä–∞-—É–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
        if dialogue_id not in self.dialogue_tracker.active_dialogues:
            return False
        
        dialogue = self.dialogue_tracker.active_dialogues[dialogue_id]
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
        # 1. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        basic_ready = (len(dialogue.participants) >= 2 and len(dialogue.messages) >= 2)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        immediate_trigger = self.dialogue_tracker.should_trigger_immediate_analysis(dialogue_id, message_text)
        ultra_strong_trigger = self._check_ultra_strong_triggers(message_text)
        
        # 3. –ù–∞–∫–æ–ø–∏–ª–æ—Å—å –ú–ù–û–ì–û –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 
        last_analysis_count = len(self.dialogue_analysis_history.get(dialogue_id, []))
        significant_activity = len(dialogue.messages) > (last_analysis_count + 1) * 5  # –ö–∞–∂–¥—ã–µ 5 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
        now = datetime.now()
        cooldown_blocks = False
        
        if dialogue_id in self.dialogue_analysis_history:
            last_analyses = self.dialogue_analysis_history[dialogue_id]
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–Ω–∞–ª–∏–∑—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
            last_analyses[:] = [analysis_time for analysis_time in last_analyses 
                            if now - analysis_time < timedelta(hours=1)]
            
            if last_analyses:
                time_since_last = now - last_analyses[-1]
                
                # –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–ï —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç cooldown
                if ultra_strong_trigger:
                    logger.info(f"üî• –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–ô —Ç—Ä–∏–≥–≥–µ—Ä - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º cooldown!")
                    cooldown_blocks = False
                # –û–±—ã—á–Ω—ã–µ —Å–∏–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–π cooldown
                elif immediate_trigger and time_since_last < timedelta(seconds=30):
                    cooldown_blocks = True
                # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π cooldown  
                elif significant_activity and time_since_last < timedelta(minutes=3):
                    cooldown_blocks = True
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        should_analyze = basic_ready and not cooldown_blocks and (
            ultra_strong_trigger or immediate_trigger or significant_activity
        )
        
        if should_analyze:
            logger.info(f"üéØ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id} –æ–¥–æ–±—Ä–µ–Ω:")
            logger.info(f"    ‚úÖ –ë–∞–∑–æ–≤–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {basic_ready}")
            logger.info(f"    üî•üî• –£–ª—å—Ç—Ä–∞-—Å–∏–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: {ultra_strong_trigger}")
            logger.info(f"    üî• –°–∏–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: {immediate_trigger}")
            logger.info(f"    üìà –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {significant_activity}")
            logger.info(f"    ‚è∞ Cooldown –±–ª–æ–∫–∏—Ä—É–µ—Ç: {cooldown_blocks}")
        else:
            reason = "cooldown" if cooldown_blocks else "–Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"
            logger.info(f"‚è∏Ô∏è –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id} –æ—Ç–ª–æ–∂–µ–Ω ({reason})")
        
        return should_analyze

    def _check_ultra_strong_triggers(self, message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–• —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç cooldown"""
        text_lower = message_text.lower()
        
        # –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–ï —Ç—Ä–∏–≥–≥–µ—Ä—ã - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å –¥–µ–Ω—å–≥–∞–º–∏
        ultra_triggers = [
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã —Å –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏
            ('–∫–∫–∫', ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–Ω—É–∂–Ω–æ', '–ø–ª–∞–Ω–∏—Ä—É–µ–º']),
            ('–º–∏–ª–ª–∏–æ–Ω', ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–±—é–¥–∂–µ—Ç', '–≥–æ—Ç–æ–≤—ã']),
            ('—Ç—ã—Å—è—á', ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–±—é–¥–∂–µ—Ç', '–≥–æ—Ç–æ–≤—ã']),
            ('–º–ª–Ω', ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–±—é–¥–∂–µ—Ç', '–≥–æ—Ç–æ–≤—ã']),
            
            # –û—á–µ–Ω—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã
            ('100000', ['—Ä—É–±–ª–µ–π', '–¥–æ–ª–ª–∞—Ä–æ–≤', '–µ–≤—Ä–æ']),
            ('500000', ['—Ä—É–±–ª–µ–π', '–¥–æ–ª–ª–∞—Ä–æ–≤', '–µ–≤—Ä–æ']),
            ('1000000', ['—Ä—É–±–ª–µ–π', '–¥–æ–ª–ª–∞—Ä–æ–≤', '–µ–≤—Ä–æ']),
            
            # –ü—Ä—è–º—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            ('–≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å', []),
            ('–≥–æ—Ç–æ–≤—ã –∫—É–ø–∏—Ç—å', []),
            ('–Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å', []),
            ('–ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–∫–∞–∑–∞—Ç—å', []),
            ('—Ö–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', []),
            ('–∫–æ–≥–¥–∞ –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', []),
            
            # –¢–µ—Ö–∑–∞–¥–∞–Ω–∏–µ –∏ –¥–æ–≥–æ–≤–æ—Ä—ã
            ('–µ—Å—Ç—å —Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ', []),
            ('–≥–æ—Ç–æ–≤—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä', []),
            ('–∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º', []),
            ('–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–≥–æ–≤–æ—Ä', []),
        ]
        
        for trigger in ultra_triggers:
            if isinstance(trigger, tuple):
                main_trigger, context_words = trigger
                if main_trigger in text_lower:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤, —Ç—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ä–∞–∑—É
                    if not context_words:
                        logger.info(f"üî•üî• –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–ô —Ç—Ä–∏–≥–≥–µ—Ä: '{main_trigger}' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                        return True
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –Ω–∞–ª–∏—á–∏–µ
                    elif any(word in text_lower for word in context_words):
                        logger.info(f"üî•üî• –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–ô —Ç—Ä–∏–≥–≥–µ—Ä: '{main_trigger}' + –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                        return True
            else:
                if trigger in text_lower:
                    logger.info(f"üî•üî• –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–ô —Ç—Ä–∏–≥–≥–µ—Ä: '{trigger}' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                    return True
        
        return False

    async def _analyze_dialogue_immediately(self, dialogue_id: str, context: ContextTypes.DEFAULT_TYPE):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if dialogue_id not in self.dialogue_tracker.active_dialogues:
                return
            
            dialogue = self.dialogue_tracker.active_dialogues[dialogue_id]
            logger.info(f"üî• –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞: {dialogue_id}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
            now = datetime.now()
            if dialogue_id not in self.dialogue_analysis_history:
                self.dialogue_analysis_history[dialogue_id] = []
            self.dialogue_analysis_history[dialogue_id].append(now)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            analysis_result = await self.dialogue_analyzer.analyze_dialogue(dialogue)
            
            if analysis_result:
                if analysis_result.is_valuable_dialogue:
                    logger.info(f"üíé –¶–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥: {dialogue_id}")
                    await self._process_dialogue_result(dialogue, analysis_result, context)
                else:
                    logger.info(f"üìä –î–∏–∞–ª–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {analysis_result.confidence_score}%")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")

    async def _process_dialogue_result(self, dialogue: DialogueContext, 
                                    analysis: DialogueAnalysisResult, 
                                    context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –≥–∏–±–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
        try:
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞ {dialogue.dialogue_id}:")
            logger.info(f"    üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence_score}%")
            logger.info(f"    üè¢ –ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {analysis.business_relevance_score}%")
            logger.info(f"    üë• –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤: {len(analysis.potential_leads)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ —É–ª—å—Ç—Ä–∞-—Å–∏–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            has_ultra_triggers = any(
                self._check_ultra_strong_triggers(msg.text) 
                for msg in dialogue.messages[-5:]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            )
            
            if has_ultra_triggers:
                # –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å —É–ª—å—Ç—Ä–∞-—Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏
                min_confidence = 60  # –ë—ã–ª–æ 70%
                min_business_relevance = 65  # –ë—ã–ª–æ 75%
                min_lead_probability = 50  # –ë—ã–ª–æ 60%
                logger.info(f"üî•üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ª—å—Ç—Ä–∞-—Ç—Ä–∏–≥–≥–µ—Ä—ã - –ø—Ä–∏–º–µ–Ω—è–µ–º –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                min_confidence = 70
                min_business_relevance = 75
                min_lead_probability = 60
                logger.info(f"üìä –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            high_probability_leads = [
                lead for lead in analysis.potential_leads 
                if lead.get('lead_probability', 0) >= min_lead_probability
            ]
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
            should_notify = (
                analysis.confidence_score >= min_confidence and
                analysis.business_relevance_score >= min_business_relevance and
                len(high_probability_leads) > 0
            )
            
            if should_notify:
                logger.info(f"üíé –¶–ï–ù–ù–´–ô –¥–∏–∞–ª–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {dialogue.dialogue_id}")
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
                created_leads = []
                for lead_data in high_probability_leads:
                    user_id = lead_data['user_id']
                    participant = dialogue.participants.get(user_id)
                    
                    if participant:
                        lead = await self._create_dialogue_lead(participant, dialogue, lead_data, analysis)
                        if lead:
                            created_leads.append((participant, lead_data))
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –¶–ï–ù–ù–´–• –¥–∏–∞–ª–æ–≥–∞—Ö
                await self._notify_admins_about_dialogue(context, dialogue, analysis, created_leads)
                
            else:
                logger.info(f"üìã –î–∏–∞–ª–æ–≥ –Ω–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
                logger.info(f"    üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence_score}% (–Ω—É–∂–Ω–æ ‚â•{min_confidence}%)")
                logger.info(f"    üè¢ –ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {analysis.business_relevance_score}% (–Ω—É–∂–Ω–æ ‚â•{min_business_relevance}%)")
                logger.info(f"    üéØ –õ–∏–¥–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é: {len(high_probability_leads)} (–Ω—É–∂–Ω–æ ‚â•1)")
                logger.info(f"    üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∏–∞–ª–æ–≥–∞...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    async def _create_dialogue_lead(self, participant, dialogue, lead_data, analysis):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            participant_messages = [
                msg.text for msg in dialogue.messages 
                if msg.user_id == participant.user_id
            ]
            
            lead = Lead(
                telegram_id=participant.user_id,
                username=participant.username,
                first_name=participant.first_name,
                last_name=participant.last_name,
                source_channel=f"{dialogue.channel_title} (–¥–∏–∞–ª–æ–≥)",
                interest_score=lead_data['lead_probability'],
                message_text=" | ".join(participant_messages[-3:]),  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                message_date=dialogue.last_activity,
                lead_quality=lead_data['lead_quality'],
                interests=json.dumps(lead_data.get('key_signals', []), ensure_ascii=False),
                buying_signals=json.dumps(lead_data.get('key_signals', []), ensure_ascii=False),
                urgency_level="medium",
                estimated_budget=analysis.group_budget_estimate,
                timeline=analysis.estimated_timeline,
                notes=f"–î–∏–∞–ª–æ–≥ {dialogue.dialogue_id}. –†–æ–ª—å: {lead_data.get('role_in_decision', '—É—á–∞—Å—Ç–Ω–∏–∫')}"
            )
            
            await create_lead(lead)
            logger.info(f"‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω: {participant.first_name}")
            return lead
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞: {e}")
            return None

    async def _notify_admins_about_dialogue(self, context: ContextTypes.DEFAULT_TYPE, 
                                        dialogue: DialogueContext, 
                                        analysis: DialogueAnalysisResult,
                                        created_leads: List[Tuple]):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ —Ü–µ–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ"""
        try:
            participants_info = []
            
            logger.info(f"üìä –§–û–†–ú–ò–†–£–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:")
            logger.info(f"  - created_leads: {len(created_leads)}")
            logger.info(f"  - analysis.potential_leads: {len(analysis.potential_leads)}")
            logger.info(f"  - participant_analysis: {len(analysis.participant_analysis)}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º participant_analysis –≤–º–µ—Å—Ç–æ potential_leads
            if analysis.participant_analysis:
                for user_id, analysis_data in analysis.participant_analysis.items():
                    participant = dialogue.participants.get(user_id)
                    if participant:
                        lead_probability = analysis_data.get('lead_probability', 0)
                        role = analysis_data.get('role_in_decision', 'observer')
                        
                        participants_info.append(
                            f"üë§ {participant.display_name} (@{participant.username or 'no_username'}) - "
                            f"{lead_probability}% ({role})"
                        )
                        
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –∏–∑ analysis: {participant.display_name} - {lead_probability}%")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º potential_leads
            elif analysis.potential_leads:
                for lead_data in analysis.potential_leads:
                    user_id = lead_data.get('user_id')
                    participant = dialogue.participants.get(user_id)
                    if participant:
                        lead_probability = lead_data.get('lead_probability', 0)
                        role = lead_data.get('role_in_decision', 'observer')
                        
                        participants_info.append(
                            f"üë§ {participant.display_name} (@{participant.username or 'no_username'}) - "
                            f"{lead_probability}% ({role})"
                        )
                        
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –∏–∑ potential_leads: {participant.display_name} - {lead_probability}%")
            
            # –¢–û–õ–¨–ö–û –ï–°–õ–ò –ù–ï–¢ –ù–ò–ö–ê–ö–ò–• –î–ê–ù–ù–´–• - fallback –Ω–∞ 0%
            else:
                logger.warning("‚ö†Ô∏è –ù–ï–¢ –î–ê–ù–ù–´–• –ê–ù–ê–õ–ò–ó–ê - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                for user_id, participant in dialogue.participants.items():
                    participants_info.append(
                        f"üë§ {participant.display_name} (@{participant.username or 'no_username'}) - "
                        f"0% (observer)"
                    )
            
            participants_text = "\n".join(participants_info)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            dialogue_history = []
            for msg in dialogue.messages:
                timestamp = msg.timestamp.strftime("%H:%M")
                username = msg.username or "no_username"
                text = msg.text[:50] + "..." if len(msg.text) > 50 else msg.text
                dialogue_history.append(f"[{timestamp}] {username}: {text}")
            
            history_text = "\n".join(dialogue_history)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –∏ –±—é–¥–∂–µ—Ç
            estimated_budget = analysis.group_budget_estimate or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            timeline = analysis.estimated_timeline or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            try:
                chat = await context.bot.get_chat(dialogue.channel_id)
                channel_name = chat.title or f"ID: {dialogue.channel_id}"
            except:
                channel_name = f"ID: {dialogue.channel_id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            duration_minutes = (dialogue.messages[-1].timestamp - dialogue.messages[0].timestamp).seconds // 60
            
            message = f"""üî• –¶–ï–ù–ù–´–ô –î–ò–ê–õ–û–ì

ü§ñ –£–ú–ù–´–ô AI –ê–ù–ê–õ–ò–ó –î–ò–ê–õ–û–ì–ê
üì∫ –ö–∞–Ω–∞–ª: {channel_name}
üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(dialogue.participants)}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(dialogue.messages)}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence_score}%
üè¢ –ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {analysis.business_relevance_score}%

üìã –°—É—Ç—å –¥–∏–∞–ª–æ–≥–∞:
{analysis.dialogue_summary}

üë• –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:
{participants_text}

üí° –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:
{chr(10).join(f'‚Ä¢ {insight}' for insight in analysis.key_insights)}

üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{chr(10).join(f'‚Ä¢ {rec}' for rec in analysis.recommended_actions)}

‚ö°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: {analysis.next_best_action}
üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: {timeline}
üí∞ –ë—é–¥–∂–µ—Ç –≥—Ä—É–ø–ø—ã: {estimated_budget}

üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
{history_text}"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admin_ids = self.config.get('bot', {}).get('admin_ids', [])
            
            for admin_id in admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        parse_mode=None
                    )
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–∏–∞–ª–æ–≥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∏–∞–ª–æ–≥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –¥–∏–∞–ª–æ–≥–µ: {e}")

    async def _notify_admins_about_individual_ultra_trigger(self, context: ContextTypes.DEFAULT_TYPE,
                                                        participant: ParticipantInfo,
                                                        message: MessageInfo,
                                                        lead_data: dict):
        """–£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± individual —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —É–ª—å—Ç—Ä–∞-—Ç—Ä–∏–≥–≥–µ—Ä–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            try:
                chat = await context.bot.get_chat(message.channel_id)
                channel_name = chat.title or f"ID: {message.channel_id}"
            except:
                channel_name = f"ID: {message.channel_id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
            lead_probability = lead_data.get('lead_probability', 90)
            role = lead_data.get('participant_role', 'client')
            
            participant_info = f"üë§ {participant.display_name} (@{participant.username or 'no_username'}) - {lead_probability}% ({role})"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            text_lower = message.text.lower()
            if '–∫—É–ø–∏—Ç—å' in text_lower:
                intent_type = "–ì–û–¢–û–í –ö–£–ü–ò–¢–¨"
            elif '–∑–∞–∫–∞–∑–∞—Ç—å' in text_lower:
                intent_type = "–ì–û–¢–û–í –ó–ê–ö–ê–ó–ê–¢–¨"  
            elif '—Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ' in text_lower:
                intent_type = "–ï–°–¢–¨ –¢–ï–•–ó–ê–î–ê–ù–ò–ï"
            elif '–¥–æ–≥–æ–≤–æ—Ä' in text_lower:
                intent_type = "–ì–û–¢–û–í –ö –î–û–ì–û–í–û–†–£"
            else:
                intent_type = "–ü–û–ö–£–ü–ê–¢–ï–õ–¨–°–ö–û–ï –ù–ê–ú–ï–†–ï–ù–ò–ï"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            if '–∫—É–ø–∏—Ç—å' in text_lower or '–∑–∞–∫–∞–∑–∞—Ç—å' in text_lower:
                recommendations = [
                    "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                    "–£—Ç–æ—á–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                    "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏"
                ]
                next_step = "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç"
            elif '—Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ' in text_lower:
                recommendations = [
                    "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
                    "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", 
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
                    "–û—Ü–µ–Ω–∏—Ç—å —Å—Ä–æ–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å"
                ]
                next_step = "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
            else:
                recommendations = [
                    "–í—ã—è—Å–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
                    "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Ä–µ—à–µ–Ω–∏—è"
                ]
                next_step = "–°–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            timestamp = message.timestamp.strftime("%H:%M")
            
            message_text = f"""üî• –°–†–û–ß–ù–û: {intent_type}!

ü§ñ –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–ô –ü–û–ö–£–ü–ê–¢–ï–õ–¨–°–ö–ò–ô –°–ò–ì–ù–ê–õ
üì∫ –ö–∞–Ω–∞–ª: {channel_name}
üïê –í—Ä–µ–º—è: {timestamp}
üë§ –û—Ç: {participant.display_name} (@{participant.username or 'no_username'})
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "{message.text}"

üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 95% (—É–ª—å—Ç—Ä–∞-—Ç—Ä–∏–≥–≥–µ—Ä)
üè¢ –ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: 95%

üë• –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–∞:
{participant_info}

üí° –ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã:
‚Ä¢ –ü—Ä—è–º–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∫—É–ø–∏—Ç—å/–∑–∞–∫–∞–∑–∞—Ç—å
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞
‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–π—Å—Ç–≤–∏—é

üéØ –°–†–û–ß–ù–´–ï –¥–µ–π—Å—Ç–≤–∏—è:
{chr(10).join(f'‚Ä¢ {rec}' for rec in recommendations)}

‚ö°Ô∏è –ù–ï–ú–ï–î–õ–ï–ù–ù–û: {next_step}
üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è
üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: —Å—Ä–æ—á–Ω–æ (–∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤)

üö® –≠–¢–û –ì–û–¢–û–í–´–ô –ü–û–ö–£–ü–ê–¢–ï–õ–¨ - –†–ï–ê–ì–ò–†–£–ô–¢–ï –ú–ì–ù–û–í–ï–ù–ù–û!
üìû –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admin_ids = self.config.get('bot', {}).get('admin_ids', [])
            
            for admin_id in admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message_text,
                        parse_mode=None
                    )
                    logger.info(f"üö® –°–†–û–ß–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –°–†–û–ß–ù–û–ì–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info(f"üö® –°–†–û–ß–ù–´–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ª—å—Ç—Ä–∞-—Ç—Ä–∏–≥–≥–µ—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –°–†–û–ß–ù–û–ì–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")

    def is_channel_monitored(self, chat_id: int, chat_username: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞"""
        if not self.enabled:
            return False
        
        if str(chat_id) in self.channels:
            return True
        
        if chat_username:
            username_variants = [f"@{chat_username}", chat_username]
            for variant in username_variants:
                if variant in self.channels:
                    return True
        
        return False

    async def _notify_admins_about_individual_ultra_trigger(self, context: ContextTypes.DEFAULT_TYPE,
                                                        participant: ParticipantInfo,
                                                        message: MessageInfo,
                                                        lead_data: dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —É–ª—å—Ç—Ä–∞-—Ç—Ä–∏–≥–≥–µ—Ä–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            try:
                chat = await context.bot.get_chat(message.channel_id)
                channel_name = chat.title or f"ID: {message.channel_id}"
            except:
                channel_name = f"ID: {message.channel_id}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            timestamp = message.timestamp.strftime("%H:%M")
            
            message_text = f"""üö® –°–†–û–ß–ù–û: –ì–û–¢–û–í –ö–£–ü–ò–¢–¨!

ü§ñ –£–õ–¨–¢–†–ê-–°–ò–õ–¨–ù–´–ô –ü–û–ö–£–ü–ê–¢–ï–õ–¨–°–ö–ò–ô –°–ò–ì–ù–ê–õ
üì∫ –ö–∞–Ω–∞–ª: {channel_name}
üïê –í—Ä–µ–º—è: {timestamp}
üë§ –û—Ç: {participant.display_name} (@{participant.username or 'no_username'})
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "{message.text}"

üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 95% (—É–ª—å—Ç—Ä–∞-—Ç—Ä–∏–≥–≥–µ—Ä)
üè¢ –ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: 95%

üéØ –°–†–û–ß–ù–´–ï –¥–µ–π—Å—Ç–≤–∏—è:
- –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º
- –£—Ç–æ—á–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è  
- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
- –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

‚ö°Ô∏è –ù–ï–ú–ï–î–õ–ï–ù–ù–û: –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è
üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: —Å—Ä–æ—á–Ω–æ (–∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤)

üö® –≠–¢–û –ì–û–¢–û–í–´–ô –ü–û–ö–£–ü–ê–¢–ï–õ–¨ - –†–ï–ê–ì–ò–†–£–ô–¢–ï –ú–ì–ù–û–í–ï–ù–ù–û!"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            admin_ids = self.config.get('bot', {}).get('admin_ids', [])
            
            for admin_id in admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message_text,
                        parse_mode=None
                    )
                    logger.info(f"üö® –°–†–û–ß–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –°–†–û–ß–ù–û–ì–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –°–†–û–ß–ù–û–ì–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")


    def get_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"""
        status = {
            'enabled': self.enabled,
            'channels_count': len(self.channels),
            'channels': self.channels,
            'min_confidence_score': self.min_confidence_score,
            'individual_active_users': len(self.user_contexts),
            'individual_processed_leads_count': len(self.processed_leads),
            'dialogue_analysis_enabled': self.dialogue_analysis_enabled,
            'mode': 'unified_smart'
        }
        
        if self.dialogue_tracker:
            tracker_status = self.dialogue_tracker.get_status()
            status['dialogue_tracker'] = tracker_status
            status['dialogue_analysis_history_count'] = len(self.dialogue_analysis_history)
        
        return status

# –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π DialogueTracker –Ω–∞ —É–º–Ω—ã–π
DialogueTracker = SmartDialogueTracker
AIContextParser = UnifiedAIParser
IntegratedAIContextParser = UnifiedAIParser