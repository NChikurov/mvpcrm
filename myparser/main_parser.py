"""
myparser/main_parser.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã: –∏–º–ø–æ—Ä—Ç—ã, user_id –≤–∞–ª–∏–¥–∞—Ü–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ–º–ø—Ç—ã
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any, Tuple, Protocol
from dataclasses import dataclass, field
from abc import ABC, abstractmethod
from telegram import Update, User
from telegram.ext import ContextTypes

from database.operations import create_lead, update_channel_stats
from database.models import Lead
from ai.claude_client import get_claude_client

logger = logging.getLogger(__name__)

# === –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ===

@dataclass
class ParticipantInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –¥–∏–∞–ª–æ–≥–∞"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    role: str = "participant"
    message_count: int = 0
    engagement_score: float = 0.0
    buying_signals: List[str] = field(default_factory=list)
    influence_level: float = 0.0

    @property
    def display_name(self) -> str:
        return self.first_name or f"User_{self.user_id}"

@dataclass
class DialogueContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞"""
    dialogue_id: str
    channel_id: int
    channel_title: str
    participants: Dict[int, ParticipantInfo]
    messages: List[Dict[str, Any]]
    start_time: datetime
    last_activity: datetime
    business_score: float = 0.0
    urgency_level: str = "low"
    estimated_value: Optional[float] = None

@dataclass
class AnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    is_valuable: bool
    confidence_score: float
    business_relevance: float
    potential_leads: List[Dict[str, Any]]
    recommended_actions: List[str]
    next_steps: str
    priority_level: str = "medium"

# === –ë–ê–ó–û–í–´–ï –ö–õ–ê–°–°–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°–´ ===

class BaseMessageAnalyzer(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @abstractmethod
    async def analyze(self, message: str, context: Dict[str, Any]) -> Dict[str, Any]:
        pass

class BaseNotificationSender(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    @abstractmethod
    async def send_notification(self, notification_data: Dict[str, Any]) -> bool:
        pass

# === –§–ê–ë–†–ò–ö–ò (–î–û–ë–ê–í–õ–ï–ù–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ú–ü–û–†–¢–ê) ===

class AnalyzerFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤"""
    
    @staticmethod
    def create_analyzer(analyzer_type: str, config: Dict[str, Any]) -> BaseMessageAnalyzer:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ —Ç–∏–ø—É"""
        if analyzer_type == "claude":
            return ClaudeMessageAnalyzer()
        elif analyzer_type == "simple":
            return SimpleMessageAnalyzer()
        else:
            logger.warning(f"Unknown analyzer type: {analyzer_type}, using simple")
            return SimpleMessageAnalyzer()

class NotificationFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    @staticmethod
    def create_sender(sender_type: str) -> BaseNotificationSender:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É"""
        if sender_type == "telegram":
            return TelegramNotificationSender()
        else:
            logger.warning(f"Unknown sender type: {sender_type}, using telegram")
            return TelegramNotificationSender()

# === –ê–ù–ê–õ–ò–ó–ê–¢–û–†–´ –° –£–õ–£–ß–®–ï–ù–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ===

class ClaudeMessageAnalyzer(BaseMessageAnalyzer):
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Claude API —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.client = get_claude_client()
        self._cache = {}
    
    async def analyze(self, message: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        logger.info(f"üîç AI –ê–ù–ê–õ–ò–ó –ù–ê–ß–ê–¢")
        logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: '{message[:100]}...' (–¥–ª–∏–Ω–∞: {len(message)})")
        logger.info(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {context.get('participants_info', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
        logger.info(f"üí¨ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {len(context.get('dialogue_history', '').split('\\n'))} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{hash(message)}_{hash(str(context))}"
        if cache_key in self._cache:
            logger.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞")
            return self._cache[cache_key]
        
        if not self.client or not self.client.client:
            logger.warning("‚ö†Ô∏è Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É")
            return await SimpleMessageAnalyzer().analyze(message, context)
        
        try:
            prompt = self._build_optimized_prompt(message, context)
            
            start_time = datetime.now()
            
            response = await asyncio.wait_for(
                self.client.client.messages.create(
                    model=self.client.model,
                    max_tokens=1000,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.1
                ),
                timeout=8.0  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–º–µ–Ω—å—à–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
            )
            
            duration = (datetime.now() - start_time).total_seconds()
            
            raw_response = response.content[0].text
            logger.info(f"ü§ñ Claude –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {duration:.2f}—Å")
            logger.info(f"üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç Claude: {raw_response[:500]}...")
            
            result = self._parse_response(raw_response, context)
            
            logger.info(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù:")
            logger.info(f"   üéØ –¶–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥: {result.get('is_valuable_dialogue', False)}")
            logger.info(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence_score', 0)}%")
            logger.info(f"   üè¢ –ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.get('business_relevance_score', 0)}%")
            logger.info(f"   üë• –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤: {len(result.get('potential_leads', []))}")
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._cache[cache_key] = result
            if len(self._cache) > 50:  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                self._cache.clear()
            
            return result
            
        except asyncio.TimeoutError:
            logger.error("‚è∞ Claude API timeout - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É")
            return await SimpleMessageAnalyzer().analyze(message, context)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Claude API: {e} - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É")
            return await SimpleMessageAnalyzer().analyze(message, context)
    
    def _build_optimized_prompt(self, message: str, context: Dict[str, Any]) -> str:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø—Ä–æ–º–ø—Ç —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ user_id"""
        participants_info = context.get('participants_info', '')
        dialogue_history = context.get('dialogue_history', '')
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞–ø–∏–Ω–≥ user_id -> username –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        current_user_id = context.get('current_user_id', 0)
        
        return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∏–∑–Ω–µ—Å-–¥–∏–∞–ª–æ–≥ –∏ –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON:

–ö–û–ù–¢–ï–ö–°–¢:
–ö–∞–Ω–∞–ª: {context.get('channel_title', 'Unknown')}
–£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants_info}
–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {current_user_id}

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
{dialogue_history[-800:]}

–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï: "{message}"

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ß–ò–°–õ–û–ú (–Ω–µ username!)
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ user_id —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å user_id, –∏—Å–ø–æ–ª—å–∑—É–π 0

–ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

–ò–©–ò –°–ò–ì–ù–ê–õ–´:
üî• –ì–û–†–Ø–ß–ò–ï: "–∫—É–ø–∏—Ç—å", "–∑–∞–∫–∞–∑–∞—Ç—å", "–≥–æ—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∞—Ç—å", "–±—é–¥–∂–µ—Ç –µ—Å—Ç—å"
‚≠ê –¢–ï–ü–õ–´–ï: "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–∫–æ–≥–¥–∞ –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å", "—Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ"
üëç –ò–ù–¢–ï–†–ï–°: "–ø–æ–¥—Ä–æ–±–Ω–µ–µ", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º"

JSON:
{{
    "is_valuable_dialogue": boolean,
    "confidence_score": —á–∏—Å–ª–æ_0_100,
    "business_relevance_score": —á–∏—Å–ª–æ_0_100,
    "potential_leads": [
        {{
            "user_id": {current_user_id},
            "lead_probability": —á–∏—Å–ª–æ_0_100,
            "lead_quality": "hot/warm/cold",
            "key_signals": ["—Å–ø–∏—Å–æ–∫_–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö_—Å–∏–≥–Ω–∞–ª–æ–≤"],
            "role_in_decision": "decision_maker/influencer/observer/budget_holder",
            "urgency_indicators": ["—Å–ø–∏—Å–æ–∫_—Å—Ä–æ—á–Ω–æ—Å—Ç–∏"],
            "estimated_budget_range": "–¥–∏–∞–ø–∞–∑–æ–Ω_–∏–ª–∏_null"
        }}
    ],
    "dialogue_summary": "–∫—Ä–∞—Ç–∫–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ_—Å—É—Ç–∏",
    "key_insights": ["—Å–ø–∏—Å–æ–∫_–∏–Ω—Å–∞–π—Ç–æ–≤"],
    "recommended_actions": ["—Å–ø–∏—Å–æ–∫_–¥–µ–π—Å—Ç–≤–∏–π"],
    "next_best_action": "—Å–ª–µ–¥—É—é—â–∏–π_—à–∞–≥",
    "priority_level": "low/medium/high/urgent"
}}"""

    def _parse_response(self, response_text: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude"""
        try:
            import re
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                result = json.loads(json_match.group())
                
                if not isinstance(result.get('potential_leads'), list):
                    result['potential_leads'] = []
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è user_id
                valid_leads = []
                current_user_id = context.get('current_user_id', 0)
                
                for lead in result.get('potential_leads', []):
                    user_id = lead.get('user_id')
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å user_id
                    if isinstance(user_id, str):
                        # –ï—Å–ª–∏ —ç—Ç–æ username, –∏—Å–ø–æ–ª—å–∑—É–µ–º current_user_id
                        if user_id.isalpha():
                            lead['user_id'] = current_user_id
                            logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω user_id —Å '{user_id}' –Ω–∞ {current_user_id}")
                        else:
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ
                            try:
                                lead['user_id'] = int(user_id)
                            except ValueError:
                                lead['user_id'] = current_user_id
                                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id '{user_id}', –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ {current_user_id}")
                    
                    elif isinstance(user_id, int) and user_id > 0:
                        # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id
                        pass
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º current_user_id –∫–∞–∫ fallback
                        lead['user_id'] = current_user_id
                        logger.info(f"üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fallback user_id: {current_user_id}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ user_id –≤–∞–ª–∏–¥–µ–Ω
                    if lead['user_id'] > 0:
                        valid_leads.append(lead)
                    else:
                        logger.warning(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω –ª–∏–¥ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º user_id: {lead.get('user_id')}")
                
                result['potential_leads'] = valid_leads
                logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, –≤–∞–ª–∏–¥–Ω—ã—Ö –ª–∏–¥–æ–≤: {len(valid_leads)}")
                return result
            else:
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Claude: {e}")
            logger.error(f"üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response_text[:200]}...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å current_user_id
            current_user_id = context.get('current_user_id', 0)
            return {
                "is_valuable_dialogue": False,
                "confidence_score": 0,
                "business_relevance_score": 0,
                "potential_leads": [{
                    "user_id": current_user_id,
                    "lead_probability": 30,
                    "lead_quality": "cold",
                    "key_signals": ["parsing_error"],
                    "role_in_decision": "observer",
                    "urgency_indicators": [],
                    "estimated_budget_range": None
                }] if current_user_id > 0 else [],
                "dialogue_summary": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                "key_insights": [],
                "recommended_actions": ["–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"],
                "next_best_action": "Manual review required",
                "priority_level": "low"
            }

class SimpleMessageAnalyzer(BaseMessageAnalyzer):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑ AI"""
    
    def __init__(self):
        self.business_keywords = [
            '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–±—é–¥–∂–µ—Ç',
            'crm', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–±–æ—Ç', '—Å–∏—Å—Ç–µ–º–∞'
        ]
        self.urgency_keywords = [
            '—Å—Ä–æ—á–Ω–æ', '—Å–µ–≥–æ–¥–Ω—è', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '—Å–∫–æ—Ä–µ–µ'
        ]
        self.decision_keywords = [
            '—Ä–µ—à–∞—é', '–≤—ã–±–∏—Ä–∞—é', '—É—Ç–≤–µ—Ä–∂–¥–∞—é', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'
        ]
    
    async def analyze(self, message: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º user_id"""
        logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ AI)")
        logger.info(f"üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: '{message[:100]}...'")
        
        message_lower = message.lower()
        
        found_business = [kw for kw in self.business_keywords if kw in message_lower]
        found_urgency = [kw for kw in self.urgency_keywords if kw in message_lower]
        found_decision = [kw for kw in self.decision_keywords if kw in message_lower]
        
        business_score = min(len(found_business) * 20, 100)
        urgency_score = min(len(found_urgency) * 15, 100)
        decision_score = min(len(found_decision) * 25, 100)
        
        total_score = min(business_score + urgency_score + decision_score, 100)
        
        if total_score >= 80:
            quality = "hot"
        elif total_score >= 60:
            quality = "warm"
        else:
            quality = "cold"
        
        if decision_score > 0:
            role = "decision_maker"
        elif business_score > 20:
            role = "influencer"
        else:
            role = "observer"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id
        current_user_id = context.get('current_user_id', 0)
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å–ª–æ–≤–∞: {found_business}")
        logger.info(f"‚ö° –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: {found_urgency}")
        logger.info(f"üëë –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π: {found_decision}")
        logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä: {total_score}% (user_id: {current_user_id})")
        
        result = {
            "is_valuable_dialogue": total_score >= 40,
            "confidence_score": min(total_score + 20, 100),
            "business_relevance_score": business_score,
            "potential_leads": [{
                "user_id": current_user_id,
                "lead_probability": total_score,
                "lead_quality": quality,
                "key_signals": found_business + found_urgency + found_decision,
                "role_in_decision": role,
                "urgency_indicators": found_urgency,
                "estimated_budget_range": "unknown"
            }] if total_score >= 30 and current_user_id > 0 else [],
            "dialogue_summary": f"–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: {total_score}% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å, –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(found_business + found_urgency + found_decision)}",
            "key_insights": self._generate_insights(found_business, found_urgency, found_decision, total_score),
            "recommended_actions": self._generate_actions(quality),
            "next_best_action": self._get_next_action(quality),
            "priority_level": "high" if total_score >= 80 else "medium" if total_score >= 60 else "low"
        }
        
        logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: —Ü–µ–Ω–Ω–æ—Å—Ç—å={result['is_valuable_dialogue']}, –ª–∏–¥–æ–≤={len(result['potential_leads'])}")
        return result
    
    def _generate_insights(self, business_words: List[str], urgency_words: List[str], 
                          decision_words: List[str], score: int) -> List[str]:
        insights = []
        if score >= 70:
            insights.append("–í—ã—Å–æ–∫–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å")
        if business_words:
            insights.append(f"–ë–∏–∑–Ω–µ—Å-–∏–Ω—Ç–µ—Ä–µ—Å: {', '.join(business_words)}")
        if urgency_words:
            insights.append(f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {', '.join(urgency_words)}")
        if decision_words:
            insights.append(f"–†–æ–ª—å –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π: {', '.join(decision_words)}")
        return insights
    
    def _generate_actions(self, quality: str) -> List[str]:
        if quality == "hot":
            return ["–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç", "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ"]
        elif quality == "warm":
            return ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24—á", "–£—Ç–æ—á–Ω–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"]
        else:
            return ["–î–æ–±–∞–≤–∏—Ç—å –≤ –≤–æ—Ä–æ–Ω–∫—É", "–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]
    
    def _get_next_action(self, quality: str) -> str:
        if quality == "hot":
            return "–°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç"
        elif quality == "warm":
            return "–°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤"
        else:
            return "–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –±—É–¥—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"

# === –¢–†–ï–ö–ï–† –î–ò–ê–õ–û–ì–û–í ===

class SmartDialogueTracker:
    """–¢—Ä–µ–∫–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.active_dialogues: Dict[str, DialogueContext] = {}
        self.message_cache: Dict[int, List[Dict[str, Any]]] = {}
        
        self.window_size = 8
        self.dialogue_timeout = timedelta(minutes=15)
        self.min_participants = 2
        
        self._business_signals_cache = {}
        
        logger.info(f"üé≠ –¢—Ä–µ–∫–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –æ–∫–Ω–æ={self.window_size}, —Ç–∞–π–º–∞—É—Ç={self.dialogue_timeout}")
    
    async def track_message(self, update: Update) -> Optional[str]:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            chat_id = update.effective_chat.id
            user = update.effective_user
            message = update.message
            
            if not user or not message or not message.text:
                return None
            
            logger.info(f"üé≠ –¢–†–ï–ö–ò–ù–ì –î–ò–ê–õ–û–ì–ê:")
            logger.info(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or 'no_username'}) ID:{user.id}")
            logger.info(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: '{message.text[:100]}...' (–¥–ª–∏–Ω–∞: {len(message.text)})")
            logger.info(f"   üì∫ –ö–∞–Ω–∞–ª: {update.effective_chat.title} ID:{chat_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à —Å user_id
            self._add_to_cache(chat_id, {
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'text': message.text,
                'timestamp': datetime.now(),
                'message_id': message.message_id
            })
            
            conversation_type = self._analyze_conversation_type(chat_id)
            logger.info(f"   üîç –¢–∏–ø —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {conversation_type}")
            
            if conversation_type == "individual":
                logger.info("   üë§ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return None
            
            dialogue_id = await self._find_or_create_dialogue(chat_id, update.effective_chat.title)
            
            if dialogue_id:
                logger.info(f"   üé≠ –î–∏–∞–ª–æ–≥: {dialogue_id}")
                await self._update_dialogue(dialogue_id, user, message)
                
                dialogue = self.active_dialogues.get(dialogue_id)
                if dialogue:
                    logger.info(f"   üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(dialogue.participants)}, "
                              f"—Å–æ–æ–±—â–µ–Ω–∏–π: {len(dialogue.messages)}, "
                              f"–±–∏–∑–Ω–µ—Å-—Å–∫–æ—Ä: {dialogue.business_score}")
            
            await self._cleanup_expired_dialogues()
            
            return dialogue_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None
    
    def _add_to_cache(self, chat_id: int, message_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫—ç—à"""
        if chat_id not in self.message_cache:
            self.message_cache[chat_id] = []
        
        cache = self.message_cache[chat_id]
        cache.append(message_data)
        
        if len(cache) > self.window_size:
            cache[:] = cache[-self.window_size:]
        
        logger.debug(f"üíæ –ö—ç—à –∫–∞–Ω–∞–ª–∞ {chat_id}: {len(cache)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    def _analyze_conversation_type(self, chat_id: int) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        cache = self.message_cache.get(chat_id, [])
        
        if len(cache) < 2:
            return "individual"
        
        recent_messages = cache[-6:]
        unique_users = set(msg['user_id'] for msg in recent_messages)
        
        logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {len(recent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, {len(unique_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        if len(unique_users) >= 2:
            quick_responses = 0
            for i in range(1, len(recent_messages)):
                time_diff = recent_messages[i]['timestamp'] - recent_messages[i-1]['timestamp']
                if time_diff <= timedelta(minutes=3) and recent_messages[i]['user_id'] != recent_messages[i-1]['user_id']:
                    quick_responses += 1
            
            logger.debug(f"‚ö° –ë—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {quick_responses}")
            return "dialogue" if quick_responses > 0 else "individual"
        
        return "individual"
    
    async def _find_or_create_dialogue(self, chat_id: int, chat_title: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        for dialogue_id, dialogue in self.active_dialogues.items():
            if (dialogue.channel_id == chat_id and 
                datetime.now() - dialogue.last_activity < self.dialogue_timeout):
                logger.debug(f"‚ôªÔ∏è –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥: {dialogue_id}")
                return dialogue_id
        
        dialogue_id = f"dlg_{chat_id}_{int(datetime.now().timestamp())}"
        
        self.active_dialogues[dialogue_id] = DialogueContext(
            dialogue_id=dialogue_id,
            channel_id=chat_id,
            channel_title=chat_title or f"Channel_{chat_id}",
            participants={},
            messages=[],
            start_time=datetime.now(),
            last_activity=datetime.now()
        )
        
        logger.info(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥: {dialogue_id} –≤ –∫–∞–Ω–∞–ª–µ '{chat_title}'")
        return dialogue_id
    
    async def _update_dialogue(self, dialogue_id: str, user: User, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        dialogue = self.active_dialogues.get(dialogue_id)
        if not dialogue:
            return
        
        if user.id not in dialogue.participants:
            dialogue.participants[user.id] = ParticipantInfo(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            logger.info(f"üë§ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}: {user.first_name} (ID: {user.id})")
        
        participant = dialogue.participants[user.id]
        participant.message_count += 1
        
        signals = self._get_buying_signals(message.text)
        if signals:
            participant.buying_signals.extend(signals)
            dialogue.business_score += len(signals) * 10
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã: {signals} –æ—Ç {user.first_name}")
        
        dialogue.messages.append({
            'user_id': user.id,
            'text': message.text,
            'timestamp': datetime.now(),
            'signals': signals
        })
        
        dialogue.last_activity = datetime.now()
        
        logger.debug(f"üìù –î–∏–∞–ª–æ–≥ {dialogue_id} –æ–±–Ω–æ–≤–ª–µ–Ω: +1 —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}")
    
    def _get_buying_signals(self, text: str) -> List[str]:
        """–ü–æ–∏—Å–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        text_hash = hash(text.lower())
        
        if text_hash in self._business_signals_cache:
            return self._business_signals_cache[text_hash]
        
        signals = []
        text_lower = text.lower()
        
        signal_patterns = {
            'purchase_intent': ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', '—Ö–æ—á—É –∫—É–ø–∏—Ç—å'],
            'price_inquiry': ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–∫–∞–∫–∞—è —Ü–µ–Ω–∞'],
            'budget_discussion': ['–±—é–¥–∂–µ—Ç', '–≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å', '–µ—Å—Ç—å –¥–µ–Ω—å–≥–∏'],
            'urgency': ['—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '—Å–µ–≥–æ–¥–Ω—è', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ'],
            'technical_interest': ['–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', 'api', '—Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'],
            'decision_making': ['—Ä–µ—à–∞–µ–º', '–≤—ã–±–∏—Ä–∞–µ–º', '–ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ']
        }
        
        for category, patterns in signal_patterns.items():
            if any(pattern in text_lower for pattern in patterns):
                signals.append(category)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._business_signals_cache[text_hash] = signals
        if len(self._business_signals_cache) > 100:  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            items = list(self._business_signals_cache.items())
            self._business_signals_cache = dict(items[-50:])
        
        return signals
    
    async def _cleanup_expired_dialogues(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        now = datetime.now()
        expired = [
            dialogue_id for dialogue_id, dialogue in self.active_dialogues.items()
            if now - dialogue.last_activity > self.dialogue_timeout
        ]
        
        for dialogue_id in expired:
            dialogue = self.active_dialogues.pop(dialogue_id, None)
            if dialogue:
                logger.info(f"üóëÔ∏è –î–∏–∞–ª–æ–≥ {dialogue_id} –∑–∞–≤–µ—Ä—à–µ–Ω (—Ç–∞–π–º–∞—É—Ç): "
                          f"—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤={len(dialogue.participants)}, "
                          f"—Å–æ–æ–±—â–µ–Ω–∏–π={len(dialogue.messages)}")
    
    def should_analyze_immediately(self, dialogue_id: str, message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        ultra_triggers = [
            '–≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å', '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
            '–∫–æ–≥–¥–∞ –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å', '–µ—Å—Ç—å –±—é–¥–∂–µ—Ç', '–ø–æ–¥–ø–∏—à–µ–º –¥–æ–≥–æ–≤–æ—Ä'
        ]
        
        text_lower = message_text.lower()
        has_trigger = any(trigger in text_lower for trigger in ultra_triggers)
        
        if has_trigger:
            logger.info(f"‚ö° –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó: –Ω–∞–π–¥–µ–Ω —É–ª—å—Ç—Ä–∞-—Ç—Ä–∏–≥–≥–µ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        
        return has_trigger

# === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===

class TelegramNotificationSender(BaseNotificationSender):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
    
    async def send_notification(self, notification_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            context = notification_data.get('context')
            admin_ids = notification_data.get('admin_ids', [])
            message = notification_data.get('message', '')
            
            logger.info(f"üì§ –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
            logger.info(f"   üëë –ê–¥–º–∏–Ω–æ–≤: {len(admin_ids)} {admin_ids}")
            logger.info(f"   üí¨ –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"   ü§ñ Context –¥–æ—Å—Ç—É–ø–µ–Ω: {context is not None}")
            
            if not context:
                logger.error("‚ùå Context –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return False
            
            if not admin_ids:
                logger.error("‚ùå –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç")
                return False
            
            if not message:
                logger.error("‚ùå –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—É—Å—Ç")
                return False
            
            success_count = 0
            for admin_id in admin_ids:
                try:
                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}")
                    
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message[:4000],  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                        parse_mode=None,
                        disable_web_page_preview=True
                    )
                    
                    success_count += 1
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {success_count}/{len(admin_ids)} —É—Å–ø–µ—à–Ω–æ")
            return success_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False

# === –ì–õ–ê–í–ù–´–ô –ü–ê–†–°–ï–† ===

class OptimizedUnifiedParser:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.parsing_config = config.get('parsing', {})
        
        self.enabled = self.parsing_config.get('enabled', True)
        self.channels = self._parse_channels()
        self.min_confidence = self.parsing_config.get('min_confidence_score', 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫–∏
        analyzer_type = "claude" if self._has_claude_api() else "simple"
        self.message_analyzer = AnalyzerFactory.create_analyzer(analyzer_type, config)
        self.notification_sender = NotificationFactory.create_sender("telegram")
        self.dialogue_tracker = SmartDialogueTracker(config)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'dialogues_created': 0,
            'leads_generated': 0,
            'notifications_sent': 0,
            'analysis_failures': 0,
            'notifications_failed': 0
        }
        
        self.analysis_cache: Dict[str, datetime] = {}
        self.cache_timeout = timedelta(minutes=5)
        
        logger.info(f"üöÄ –ü–ê–†–°–ï–† –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù:")
        logger.info(f"   üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {analyzer_type}")
        logger.info(f"   üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(self.channels)}")
        logger.info(f"   ‚öôÔ∏è –í–∫–ª—é—á–µ–Ω: {self.enabled}")
        logger.info(f"   üìä –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence}%")
    
    def _parse_channels(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        channels_raw = self.parsing_config.get('channels', [])
        if isinstance(channels_raw, list):
            return [str(ch) for ch in channels_raw]
        elif isinstance(channels_raw, (str, int)):
            return [str(channels_raw)]
        return []
    
    def _has_claude_api(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Claude API"""
        claude_key = self.config.get('claude', {}).get('api_key', '')
        has_api = bool(claude_key and claude_key != 'your_claude_api_key_here')
        logger.info(f"üß† Claude API: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if has_api else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        return has_api
    
    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
        try:
            if not self.enabled:
                logger.debug("‚è∏Ô∏è –ü–∞—Ä—Å–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
            
            chat_id = update.effective_chat.id
            user = update.effective_user
            message = update.message
            
            if not user or not message or not message.text:
                logger.debug("‚è∏Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            self.stats['messages_processed'] += 1
            
            logger.info(f"üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø #{self.stats['messages_processed']}:")
            logger.info(f"   üë§ –û—Ç: {user.first_name} (@{user.username or 'no_username'}) ID:{user.id}")
            logger.info(f"   üì∫ –ö–∞–Ω–∞–ª: {update.effective_chat.title} ID:{chat_id}")
            logger.info(f"   üí¨ –¢–µ–∫—Å—Ç: '{message.text[:150]}...' (–¥–ª–∏–Ω–∞: {len(message.text)})")
            
            if not self.is_channel_monitored(chat_id, update.effective_chat.username):
                logger.info(f"‚è∏Ô∏è –ö–∞–Ω–∞–ª {chat_id} –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
            
            dialogue_id = await self.dialogue_tracker.track_message(update)
            
            if dialogue_id:
                logger.info(f"üé≠ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –¥–∏–∞–ª–æ–≥: {dialogue_id}")
                should_analyze = await self._should_analyze_dialogue(dialogue_id, message.text)
                
                if should_analyze:
                    logger.info(f"üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}")
                    await self._analyze_dialogue(dialogue_id, context, user)
                else:
                    logger.info(f"‚è∏Ô∏è –î–∏–∞–ª–æ–≥ {dialogue_id} –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            else:
                logger.info(f"üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                await self._process_individual_message(user, message, context)
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats['analysis_failures'] += 1
    
    async def _should_analyze_dialogue(self, dialogue_id: str, message_text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        cache_key = f"{dialogue_id}_{hash(message_text)}"
        now = datetime.now()
        
        if cache_key in self.analysis_cache:
            time_diff = now - self.analysis_cache[cache_key]
            if time_diff < self.cache_timeout:
                logger.debug(f"‚è∏Ô∏è –ê–Ω–∞–ª–∏–∑ –≤ –∫—ç—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
        
        immediate_trigger = self.dialogue_tracker.should_analyze_immediately(dialogue_id, message_text)
        
        dialogue = self.dialogue_tracker.active_dialogues.get(dialogue_id)
        if not dialogue:
            logger.warning(f"‚ö†Ô∏è –î–∏–∞–ª–æ–≥ {dialogue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        basic_ready = len(dialogue.participants) >= 2 and len(dialogue.messages) >= 3
        has_business_signals = dialogue.business_score > 0
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞:")
        logger.info(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(dialogue.participants)} (–Ω—É–∂–Ω–æ >= 2)")
        logger.info(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(dialogue.messages)} (–Ω—É–∂–Ω–æ >= 3)")
        logger.info(f"   üéØ –ë–∏–∑–Ω–µ—Å-—Å–∫–æ—Ä: {dialogue.business_score}")
        logger.info(f"   ‚ö° –£–ª—å—Ç—Ä–∞-—Ç—Ä–∏–≥–≥–µ—Ä: {immediate_trigger}")
        
        should_analyze = basic_ready and (immediate_trigger or has_business_signals)
        
        if should_analyze:
            self.analysis_cache[cache_key] = now
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
            self.analysis_cache = {
                k: v for k, v in self.analysis_cache.items()
                if now - v < self.cache_timeout
            }
        
        logger.info(f"üìä –†–µ—à–µ–Ω–∏–µ: {'–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨' if should_analyze else '–ù–ï –ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨'}")
        return should_analyze
    
    async def _analyze_dialogue(self, dialogue_id: str, context: ContextTypes.DEFAULT_TYPE, current_user: User):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º user_id"""
        try:
            dialogue = self.dialogue_tracker.active_dialogues.get(dialogue_id)
            if not dialogue:
                logger.error(f"‚ùå –î–∏–∞–ª–æ–≥ {dialogue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            logger.info(f"üîç –ù–ê–ß–ò–ù–ê–ï–ú –ê–ù–ê–õ–ò–ó –î–ò–ê–õ–û–ì–ê {dialogue_id}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            participants_info = []
            for p in dialogue.participants.values():
                info = f"{p.display_name} (@{p.username or 'no_username'}) ID:{p.user_id}: {p.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π"
                if p.buying_signals:
                    info += f", —Å–∏–≥–Ω–∞–ª—ã: {p.buying_signals}"
                participants_info.append(info)
            
            dialogue_history = []
            for msg in dialogue.messages[-10:]:
                participant = dialogue.participants.get(msg['user_id'])
                display_name = participant.display_name if participant else f"User_{msg['user_id']}"
                time_str = msg['timestamp'].strftime('%H:%M')
                signals_str = f" [—Å–∏–≥–Ω–∞–ª—ã: {msg['signals']}]" if msg['signals'] else ""
                dialogue_history.append(f"[{time_str}] {display_name}: {msg['text']}{signals_str}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º current_user_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            analysis_context = {
                'channel_title': dialogue.channel_title,
                'participants_info': '\n'.join(participants_info),
                'dialogue_history': '\n'.join(dialogue_history),
                'current_user_id': current_user.id  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id
            }
            
            logger.info(f"üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            logger.info(f"   üì∫ –ö–∞–Ω–∞–ª: {dialogue.channel_title}")
            logger.info(f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {len(participants_info)}")
            logger.info(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(dialogue_history)}")
            logger.info(f"   üÜî Current user ID: {current_user.id}")
            
            last_message = dialogue.messages[-1]['text'] if dialogue.messages else ""
            analysis_result = await self.message_analyzer.analyze(last_message, analysis_context)
            
            if analysis_result.get('is_valuable_dialogue', False):
                logger.info(f"üíé –î–∏–∞–ª–æ–≥ –ø—Ä–∏–∑–Ω–∞–Ω —Ü–µ–Ω–Ω—ã–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                await self._process_dialogue_result(dialogue, analysis_result, context)
            else:
                logger.info(f"üìä –î–∏–∞–ª–æ–≥ –Ω–µ –ø—Ä–∏–∑–Ω–∞–Ω —Ü–µ–Ω–Ω—ã–º (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis_result.get('confidence_score', 0)}%)")
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}: {e}")
            self.stats['analysis_failures'] += 1
    
    async def _process_dialogue_result(self, dialogue: DialogueContext, 
                                     analysis_result: Dict[str, Any], 
                                     context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            confidence = analysis_result.get('confidence_score', 0)
            business_relevance = analysis_result.get('business_relevance_score', 0)
            potential_leads = analysis_result.get('potential_leads', [])
            priority_level = analysis_result.get('priority_level', 'medium')
            
            logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê –î–ò–ê–õ–û–ì–ê:")
            logger.info(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%")
            logger.info(f"   üè¢ –ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {business_relevance}%")
            logger.info(f"   üë• –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤: {len(potential_leads)}")
            logger.info(f"   ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_level}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if priority_level == 'urgent':
                min_confidence, min_business = 30, 40
            elif priority_level == 'high':
                min_confidence, min_business = 40, 50
            else:
                min_confidence, min_business = 50, 60
            
            should_notify = (
                confidence >= min_confidence and
                business_relevance >= min_business and
                len(potential_leads) > 0
            )
            
            logger.info(f"üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
            logger.info(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}% >= {min_confidence}% ‚úÖ" if confidence >= min_confidence else f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}% < {min_confidence}% ‚ùå")
            logger.info(f"   üè¢ –ë–∏–∑–Ω–µ—Å: {business_relevance}% >= {min_business}% ‚úÖ" if business_relevance >= min_business else f"   üè¢ –ë–∏–∑–Ω–µ—Å: {business_relevance}% < {min_business}% ‚ùå")
            logger.info(f"   üë• –õ–∏–¥—ã: {len(potential_leads)} > 0 ‚úÖ" if len(potential_leads) > 0 else f"   üë• –õ–∏–¥—ã: {len(potential_leads)} = 0 ‚ùå")
            logger.info(f"   üö® –û–¢–ü–†–ê–í–õ–Ø–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {'–î–ê' if should_notify else '–ù–ï–¢'}")
            
            if should_notify:
                created_leads = []
                for lead_data in potential_leads:
                    if lead_data.get('lead_probability', 0) >= 30:  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥
                        lead = await self._create_dialogue_lead(dialogue, lead_data, analysis_result)
                        if lead:
                            created_leads.append(lead)
                
                if created_leads:
                    notification_success = await self._send_dialogue_notification(dialogue, analysis_result, created_leads, context)
                    if notification_success:
                        self.stats['notifications_sent'] += 1
                        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–∏–∞–ª–æ–≥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        self.stats['notifications_failed'] += 1
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–∏–∞–ª–æ–≥–µ")
                    
                    self.stats['leads_generated'] += len(created_leads)
                    logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–æ –ª–∏–¥–æ–≤: {len(created_leads)}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ª–∏–¥—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
            else:
                logger.info(f"‚è∏Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º - –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
    
    async def _create_dialogue_lead(self, dialogue: DialogueContext, 
                                  lead_data: Dict[str, Any], 
                                  analysis_result: Dict[str, Any]) -> Optional[Lead]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            user_id = lead_data.get('user_id')
            participant = dialogue.participants.get(user_id)
            
            if not participant:
                logger.error(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏–∞–ª–æ–≥–µ")
                return None
            
            logger.info(f"üéØ –°–æ–∑–¥–∞–µ–º –ª–∏–¥–∞: {participant.display_name} (ID: {user_id})")
            
            lead = Lead(
                telegram_id=participant.user_id,
                username=participant.username,
                first_name=participant.first_name,
                last_name=participant.last_name,
                source_channel=f"{dialogue.channel_title} (dialogue)",
                interest_score=lead_data.get('lead_probability', 0),
                message_text=self._get_participant_messages(dialogue, user_id),
                message_date=dialogue.last_activity,
                lead_quality=lead_data.get('lead_quality', 'cold'),
                interests=json.dumps(lead_data.get('key_signals', []), ensure_ascii=False),
                buying_signals=json.dumps(participant.buying_signals, ensure_ascii=False),
                urgency_level=analysis_result.get('priority_level', 'medium'),
                estimated_budget=lead_data.get('estimated_budget_range'),
                timeline=analysis_result.get('estimated_timeline'),
                notes=f"Dialogue: {dialogue.dialogue_id}. Role: {lead_data.get('role_in_decision', 'participant')}"
            )
            
            await create_lead(lead)
            logger.info(f"‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω: {participant.display_name} ({lead_data.get('lead_probability', 0)}%)")
            return lead
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None
    
    async def _process_individual_message(self, user: User, message, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            logger.info(f"üë§ –ê–ù–ê–õ–ò–ó –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø:")
            logger.info(f"   üßë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id})")
            logger.info(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: '{message.text[:100]}...'")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å user_id
            analysis_context = {
                'current_user_id': user.id,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
                'participants_info': f"{user.first_name} (@{user.username or 'no_username'})",
                'dialogue_history': f"Individual message: {message.text}"
            }
            
            analysis_result = await self.message_analyzer.analyze(message.text, analysis_context)
            
            potential_leads = analysis_result.get('potential_leads', [])
            for lead_data in potential_leads:
                lead_probability = lead_data.get('lead_probability', 0)
                if lead_probability >= 50:  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥
                    lead = await self._create_individual_lead(user, message, lead_data)
                    if lead:
                        self.stats['leads_generated'] += 1
                        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–∏–¥: {user.first_name} ({lead_probability}%)")
                        
                        if lead_probability >= 70:  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                            notification_success = await self._send_individual_notification(user, message, lead_data, context)
                            if notification_success:
                                self.stats['notifications_sent'] += 1
                                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ª–∏–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                            else:
                                self.stats['notifications_failed'] += 1
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ª–∏–¥–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _create_individual_lead(self, user: User, message, lead_data: Dict[str, Any]) -> Optional[Lead]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–∞"""
        try:
            lead = Lead(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                source_channel="Individual message",
                interest_score=lead_data.get('lead_probability', 0),
                message_text=message.text,
                message_date=datetime.now(),
                lead_quality=lead_data.get('lead_quality', 'warm'),
                interests=json.dumps(lead_data.get('key_signals', []), ensure_ascii=False),
                urgency_level=lead_data.get('priority_level', 'medium'),
                notes="Individual high-intent message"
            )
            
            await create_lead(lead)
            return lead
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–∞: {e}")
            return None
    
    def _get_participant_messages(self, dialogue: DialogueContext, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        messages = [
            msg['text'] for msg in dialogue.messages 
            if msg['user_id'] == user_id
        ]
        return " | ".join(messages[-3:])
    
    async def _send_dialogue_notification(self, dialogue: DialogueContext, 
                                        analysis_result: Dict[str, Any],
                                        created_leads: List[Lead],
                                        context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∏–∞–ª–æ–≥–µ"""
        try:
            confidence = analysis_result.get('confidence_score', 0)
            business_relevance = analysis_result.get('business_relevance_score', 0)
            priority = analysis_result.get('priority_level', 'medium')
            
            priority_emoji = "üö®" if priority == "urgent" else "üî•" if priority == "high" else "üíé"
            
            message = f"""{priority_emoji} –¶–ï–ù–ù–´–ô –î–ò–ê–õ–û–ì ({priority.upper()})

üì∫ –ö–∞–Ω–∞–ª: {dialogue.channel_title}
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(dialogue.participants)}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(dialogue.messages)}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%
üè¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {business_relevance}%

üéØ –°–æ–∑–¥–∞–Ω–æ –ª–∏–¥–æ–≤: {len(created_leads)}

üìã –°—É—Ç—å: {analysis_result.get('dialogue_summary', 'N/A')[:200]}

üí° –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:"""

            for insight in analysis_result.get('key_insights', [])[:3]:
                message += f"\n‚Ä¢ {insight[:100]}"

            message += f"\n\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
            for action in analysis_result.get('recommended_actions', [])[:3]:
                message += f"\n‚Ä¢ {action[:100]}"

            message += f"\n\n‚ö°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: {analysis_result.get('next_best_action', 'Review manually')[:100]}"
            
            if created_leads:
                message += f"\n\nüë§ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏–¥—ã:"
                for lead in created_leads[:3]:
                    message += f"\n‚Ä¢ {lead.first_name} (@{lead.username or 'no_username'}) - {lead.interest_score}%"

            notification_data = {
                'context': context,
                'admin_ids': self.config.get('bot', {}).get('admin_ids', []),
                'message': message
            }
            
            logger.info(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–∏–∞–ª–æ–≥–µ –¥–ª–∏–Ω–æ–π {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return await self.notification_sender.send_notification(notification_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∏–∞–ª–æ–≥–µ: {e}")
            return False
    
    async def _send_individual_notification(self, user: User, message, 
                                          lead_data: Dict[str, Any], 
                                          context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ª–∏–¥–µ"""
        try:
            probability = lead_data.get('lead_probability', 0)
            quality = lead_data.get('lead_quality', 'warm')
            
            notification_text = f"""üö® –ì–û–†–Ø–ß–ò–ô –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –õ–ò–î!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or 'no_username'})
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "{message.text[:200]}..."
üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability}%
üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {quality.upper()}

üî• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã:"""

            for signal in lead_data.get('key_signals', [])[:5]:
                notification_text += f"\n‚Ä¢ {signal}"

            notification_text += f"\n\n‚ö°Ô∏è –î–ï–ô–°–¢–í–£–ô–¢–ï –ë–´–°–¢–†–û: –°–≤—è–∂–∏—Ç–µ—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!"

            notification_data = {
                'context': context,
                'admin_ids': self.config.get('bot', {}).get('admin_ids', []),
                'message': notification_text
            }
            
            return await self.notification_sender.send_notification(notification_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def is_channel_monitored(self, chat_id: int, chat_username: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞"""
        if not self.enabled:
            return False
        
        if str(chat_id) in self.channels:
            return True
        
        if chat_username:
            username_variants = [f"@{chat_username}", chat_username]
            return any(variant in self.channels for variant in username_variants)
        
        return False
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        return {
            'enabled': self.enabled,
            'mode': 'optimized_unified_fixed',
            'channels_count': len(self.channels),
            'channels': self.channels,
            'min_confidence_score': self.min_confidence,
            'analyzer_type': type(self.message_analyzer).__name__,
            'active_dialogues': len(self.dialogue_tracker.active_dialogues),
            'stats': self.stats.copy(),
            'dialogue_tracker': {
                'active_dialogues': len(self.dialogue_tracker.active_dialogues),
                'cache_size': len(self.dialogue_tracker.message_cache),
                'timeout_minutes': self.dialogue_tracker.dialogue_timeout.total_seconds() / 60
            }
        }
    
    def get_performance_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        total_processed = self.stats['messages_processed']
        if total_processed == 0:
            return {'no_data': True}
        
        return {
            'messages_processed': total_processed,
            'leads_conversion_rate': (self.stats['leads_generated'] / total_processed) * 100,
            'notification_rate': (self.stats['notifications_sent'] / total_processed) * 100,
            'notification_success_rate': (self.stats['notifications_sent'] / max(self.stats['notifications_sent'] + self.stats['notifications_failed'], 1)) * 100,
            'error_rate': (self.stats['analysis_failures'] / total_processed) * 100,
            'dialogues_per_message': self.stats['dialogues_created'] / total_processed,
            'cache_efficiency': len(self.analysis_cache)
        }

# –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
UnifiedAIParser = OptimizedUnifiedParser