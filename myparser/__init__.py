"""
myparser/__init__.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã DialogueParticipant vs ParticipantInfo
"""

import logging

logger = logging.getLogger(__name__)

try:
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ main_parser.py
    from .main_parser import (
        OptimizedUnifiedParser,
        UnifiedAIParser,
        SmartDialogueTracker,
        ClaudeMessageAnalyzer,
        SimpleMessageAnalyzer,
        ParticipantInfo,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º ParticipantInfo –≤–º–µ—Å—Ç–æ DialogueParticipant
        DialogueContext,
        AnalysisResult,
        AnalyzerFactory,
        NotificationFactory,
        BaseMessageAnalyzer,
        BaseNotificationSender,
        TelegramNotificationSender
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    DialogueParticipant = ParticipantInfo  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    DialogueTracker = SmartDialogueTracker
    DialogueAnalyzer = ClaudeMessageAnalyzer
    AIContextParser = OptimizedUnifiedParser
    IntegratedAIContextParser = OptimizedUnifiedParser
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤
    class DialogueMessage:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è DialogueMessage"""
        def __init__(self, user_id: int = 0, text: str = "", timestamp=None):
            self.user_id = user_id
            self.text = text
            self.timestamp = timestamp
    
    class DialogueAnalysisResult:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è DialogueAnalysisResult"""
        def __init__(self, is_valuable: bool = False, confidence: float = 0.0):
            self.is_valuable = is_valuable
            self.confidence = confidence
    
    class AIAnalysisResult:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è AIAnalysisResult"""
        def __init__(self, interest_score: int = 0, quality: str = "unknown"):
            self.interest_score = interest_score
            self.quality = quality
    
    class UserContext:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è UserContext"""
        def __init__(self, user_id: int = 0, messages=None):
            self.user_id = user_id
            self.messages = messages or []
    
    __all__ = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        'OptimizedUnifiedParser',
        'UnifiedAIParser',
        'SmartDialogueTracker',
        'ClaudeMessageAnalyzer',
        'SimpleMessageAnalyzer',
        
        # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û)
        'ParticipantInfo',
        'DialogueContext',
        'AnalysisResult',
        'DialogueMessage',
        'DialogueAnalysisResult',
        'AIAnalysisResult',
        'UserContext',
        
        # –§–∞–±—Ä–∏–∫–∏
        'AnalyzerFactory',
        'NotificationFactory',
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
        'BaseMessageAnalyzer',
        'BaseNotificationSender',
        'TelegramNotificationSender',
        
        # –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        'DialogueParticipant',  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –∞–ª–∏–∞—Å ParticipantInfo
        'DialogueTracker',
        'DialogueAnalyzer',
        'AIContextParser',
        'IntegratedAIContextParser'
    ]
    
    logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏")
    
except ImportError as e:
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω—ã–π fallback –ø–∞—Ä—Å–µ—Ä
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä: {e}")
    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π fallback –ø–∞—Ä—Å–µ—Ä")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π fallback –ø–∞—Ä—Å–µ—Ä
    class FallbackParser:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π fallback –ø–∞—Ä—Å–µ—Ä —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
        
        def __init__(self, config):
            self.config = config
            self.enabled = config.get('parsing', {}).get('enabled', False)
            self.channels = self._parse_channels(config)
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ø–∞—Ä—Å–µ—Ä")
        
        def _parse_channels(self, config):
            """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
            channels = config.get('parsing', {}).get('channels', [])
            if isinstance(channels, list):
                return [str(ch) for ch in channels]
            elif isinstance(channels, (str, int)):
                return [str(channels)]
            return []
        
        async def process_message(self, update, context):
            """–ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                if not self.enabled:
                    return
                
                chat = update.effective_chat
                user = update.effective_user
                message = update.message
                
                if not user or not message or not message.text:
                    return
                
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                text_lower = message.text.lower()
                business_keywords = [
                    '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–±—é–¥–∂–µ—Ç',
                    'crm', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–±–æ—Ç'
                ]
                
                found_keywords = [kw for kw in business_keywords if kw in text_lower]
                
                if found_keywords:
                    logger.info(f"Fallback parser: –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ {found_keywords} –æ—Ç {user.first_name}")
                    
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –∑–¥–µ—Å—å
                    if len(found_keywords) >= 2:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ 2+ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
                        await self._create_simple_lead(user, message, found_keywords, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback parser: {e}")
        
        async def _create_simple_lead(self, user, message, keywords, context):
            """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–∏–¥–∞"""
            try:
                from database.operations import create_lead
                from database.models import Lead
                from datetime import datetime
                
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–∞
                score = min(len(keywords) * 25, 100)
                
                lead = Lead(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    source_channel="Fallback parser",
                    interest_score=score,
                    message_text=message.text[:500],
                    message_date=datetime.now(),
                    lead_quality="warm" if score >= 50 else "cold",
                    notes=f"Fallback parser. Keywords: {', '.join(keywords)}"
                )
                
                await create_lead(lead)
                logger.info(f"Fallback parser: —Å–æ–∑–¥–∞–Ω –ª–∏–¥ {user.first_name} ({score}%)")
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                admin_ids = self.config.get('bot', {}).get('admin_ids', [])
                if admin_ids:
                    notification_text = f"""üéØ –ù–æ–≤—ã–π –ª–∏–¥ (Fallback —Ä–µ–∂–∏–º)

üë§ {user.first_name} (@{user.username or 'no_username'})
üìä –°–∫–æ—Ä: {score}%
üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "{message.text[:100]}..."

‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ fallback —Ä–µ–∂–∏–º–µ"""

                    for admin_id in admin_ids:
                        try:
                            await context.bot.send_message(
                                chat_id=admin_id,
                                text=notification_text
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –ª–∏–¥–∞: {e}")
        
        def is_channel_monitored(self, chat_id, username=None):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞"""
            if not self.enabled:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
            if str(chat_id) in self.channels:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
            if username:
                username_variants = [f"@{username}", username]
                return any(variant in self.channels for variant in username_variants)
            
            return False
        
        def get_status(self):
            """–°—Ç–∞—Ç—É—Å fallback –ø–∞—Ä—Å–µ—Ä–∞"""
            return {
                'enabled': self.enabled,
                'mode': 'fallback',
                'channels_count': len(self.channels),
                'channels': self.channels,
                'error': '–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback',
                'features': ['basic_keyword_detection', 'simple_lead_creation']
            }
        
        def get_performance_metrics(self):
            """–ú–µ—Ç—Ä–∏–∫–∏ fallback –ø–∞—Ä—Å–µ—Ä–∞"""
            return {
                'mode': 'fallback',
                'no_data': True,
                'message': 'Fallback parser - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏'
            }
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    class DialogueTracker:
        def __init__(self, config): 
            self.config = config
            self.active_dialogues = {}
    
    class DialogueAnalyzer:
        def __init__(self, config): 
            self.config = config
    
    class ParticipantInfo:
        def __init__(self, user_id: int = 0, username: str = None, **kwargs):
            self.user_id = user_id
            self.username = username
            for k, v in kwargs.items():
                setattr(self, k, v)
    
    class DialogueContext:
        def __init__(self, dialogue_id: str = "", **kwargs):
            self.dialogue_id = dialogue_id
            self.participants = {}
            self.messages = []
            for k, v in kwargs.items():
                setattr(self, k, v)
    
    class AnalysisResult:
        def __init__(self, is_valuable: bool = False, **kwargs):
            self.is_valuable = is_valuable
            for k, v in kwargs.items():
                setattr(self, k, v)
    
    class DialogueMessage:
        def __init__(self, user_id: int = 0, text: str = "", **kwargs):
            self.user_id = user_id
            self.text = text
            for k, v in kwargs.items():
                setattr(self, k, v)
    
    class DialogueAnalysisResult:
        def __init__(self, **kwargs):
            for k, v in kwargs.items():
                setattr(self, k, v)
    
    class UserContext:
        def __init__(self, user_id: int = 0, **kwargs):
            self.user_id = user_id
            for k, v in kwargs.items():
                setattr(self, k, v)
    
    class AIAnalysisResult:
        def __init__(self, **kwargs):
            for k, v in kwargs.items():
                setattr(self, k, v)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    OptimizedUnifiedParser = FallbackParser
    UnifiedAIParser = FallbackParser
    AIContextParser = FallbackParser
    IntegratedAIContextParser = FallbackParser
    
    # –ê–ª–∏–∞—Å—ã
    DialogueParticipant = ParticipantInfo
    SmartDialogueTracker = DialogueTracker
    ClaudeMessageAnalyzer = DialogueAnalyzer
    
    __all__ = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã (fallback)
        'OptimizedUnifiedParser',
        'UnifiedAIParser',
        'DialogueTracker',
        'DialogueAnalyzer',
        
        # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        'ParticipantInfo',
        'DialogueContext',
        'AnalysisResult',
        'DialogueMessage',
        'DialogueAnalysisResult',
        'AIAnalysisResult',
        'UserContext',
        
        # –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        'DialogueParticipant',
        'SmartDialogueTracker',
        'ClaudeMessageAnalyzer',
        'AIContextParser',
        'IntegratedAIContextParser'
    ]
    
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º –ø–∞—Ä—Å–µ—Ä–∞")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞
def get_parser_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        from .main_parser import OptimizedUnifiedParser
        return {
            'available': True,
            'type': 'optimized',
            'features': ['ai_analysis', 'dialogue_tracking', 'advanced_notifications']
        }
    except ImportError:
        return {
            'available': False,
            'type': 'fallback',
            'features': ['basic_keyword_detection', 'simple_lead_creation'],
            'limitation': '–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
def create_parser(config):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º"""
    status = get_parser_status()
    
    if status['available']:
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä")
        return OptimizedUnifiedParser(config)
    else:
        logger.warning("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω fallback –ø–∞—Ä—Å–µ—Ä")
        return OptimizedUnifiedParser(config)  # –í fallback —Ä–µ–∂–∏–º–µ —ç—Ç–æ FallbackParser

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
__all__.extend(['get_parser_status', 'create_parser'])