#!/usr/bin/env python3
"""
AI CRM Bot - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è main.py
–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º: Unicode, –∏–º–ø–æ—Ä—Ç—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import logging
import logging.config
import sys
import os
import json
import time
import signal
from datetime import datetime, timedelta
from pathlib import Path
from contextlib import asynccontextmanager
from typing import Dict, Any, Optional

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–ò–†–û–í–ö–ò –¥–ª—è Windows
if sys.platform == "win32":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    os.system("chcp 65001 > nul")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º stdout/stderr –¥–ª—è UTF-8
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Python
    os.environ["PYTHONIOENCODING"] = "utf-8"

from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from utils.config_loader import load_config, get_config_validation_report
from database.operations import init_database
from database.db_migration import migrate_database_for_ai
from database.dialogue_db_migration import migrate_database_for_dialogues
from handlers.user import UserHandler
from handlers.admin import AdminHandler

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å UTF-8
LOGGING_CONFIG = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'detailed': {
            'format': '%(asctime)s | %(name)s | %(levelname)s | %(funcName)s:%(lineno)d | %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '%(levelname)s | %(name)s | %(message)s'
        }
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'formatter': 'detailed',
            'stream': 'ext://sys.stdout'
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'DEBUG',
            'formatter': 'detailed',
            'filename': 'logs/ai_crm_bot.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 5,
            'encoding': 'utf-8'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º UTF-8
        },
        'error_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'level': 'ERROR',
            'formatter': 'detailed',
            'filename': 'logs/errors.log',
            'maxBytes': 5242880,  # 5MB
            'backupCount': 3,
            'encoding': 'utf-8'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º UTF-8
        }
    },
    'loggers': {
        '': {  # Root logger
            'level': 'INFO',
            'handlers': ['console', 'file', 'error_file']
        },
        'httpx': {
            'level': 'WARNING',
            'handlers': ['file']
        },
        'telegram': {
            'level': 'WARNING', 
            'handlers': ['file']
        }
    }
}

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ UTF-8"""
    logs_dir = Path('logs')
    logs_dir.mkdir(exist_ok=True)
    
    try:
        logging.config.dictConfig(LOGGING_CONFIG)
    except Exception as e:
        # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é —Å UTF-8
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s | %(name)s | %(levelname)s | %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('logs/ai_crm_bot.log', encoding='utf-8')
            ],
            force=True
        )
        print(f"Warning: Using fallback logging due to: {e}")

logger = logging.getLogger(__name__)

class PerformanceMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.start_time = time.time()
        self.metrics = {
            'messages_processed': 0,
            'ai_analyses_completed': 0,
            'dialogues_created': 0,
            'leads_generated': 0,
            'notifications_sent': 0,
            'errors_count': 0,
            'average_processing_time': 0.0,
            'last_reset': datetime.now()
        }
        self.processing_times = []
    
    def record_message_processed(self, processing_time: float):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.metrics['messages_processed'] += 1
        self.processing_times.append(processing_time)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞
        if len(self.processing_times) > 1000:
            self.processing_times = self.processing_times[-500:]
        
        if self.processing_times:
            self.metrics['average_processing_time'] = sum(self.processing_times) / len(self.processing_times)
    
    def record_ai_analysis(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑"""
        self.metrics['ai_analyses_completed'] += 1
    
    def record_dialogue_created(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
        self.metrics['dialogues_created'] += 1
    
    def record_lead_generated(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ª–∏–¥"""
        self.metrics['leads_generated'] += 1
    
    def record_notification_sent(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.metrics['notifications_sent'] += 1
    
    def record_error(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.metrics['errors_count'] += 1
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
        uptime = time.time() - self.start_time
        
        return {
            **self.metrics,
            'uptime_seconds': uptime,
            'uptime_formatted': self._format_uptime(uptime),
            'messages_per_minute': self.metrics['messages_processed'] / (uptime / 60) if uptime > 60 else 0,
            'error_rate': self.metrics['errors_count'] / max(1, self.metrics['messages_processed']),
            'conversion_rate': self.metrics['leads_generated'] / max(1, self.metrics['messages_processed'])
        }
    
    def _format_uptime(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        days = int(seconds // 86400)
        hours = int((seconds % 86400) // 3600)
        minutes = int((seconds % 3600) // 60)
        
        if days > 0:
            return f"{days}d {hours}h {minutes}m"
        elif hours > 0:
            return f"{hours}h {minutes}m"
        else:
            return f"{minutes}m"

class OptimizedAIBot:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å AI CRM –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.config: Optional[Dict[str, Any]] = None
        self.app: Optional[Application] = None
        self.user_handler: Optional[UserHandler] = None
        self.admin_handler: Optional[AdminHandler] = None
        self.ai_parser: Optional[Any] = None
        self.metrics = PerformanceMetrics()
        self.is_running = False
        self._shutdown_requested = False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
        
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI CRM –±–æ—Ç–∞")

    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        def signal_handler(signum, frame):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            self._shutdown_requested = True
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self._load_and_validate_config()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self._setup_database()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self._create_telegram_app()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            await self._setup_handlers()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø–∞—Ä—Å–µ—Ä–∞
            await self._setup_ai_parser()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            self._register_handlers()
            
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    async def _load_and_validate_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        self.config = load_config()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validation_report = get_config_validation_report(self.config)
        
        if validation_report['errors']:
            for error in validation_report['errors']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {error}")
            raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        if validation_report['warnings']:
            for warning in validation_report['warnings']:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {warning}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è Unicode)
        info = validation_report['info']
        logger.info(f"ü§ñ –ë–æ—Ç: {info['bot_name']}")
        logger.info(f"üëë –ê–¥–º–∏–Ω–æ–≤: {info['admin_count']}")
        claude_status = "‚úÖ" if info['claude_enabled'] else "‚ö†Ô∏è Simple mode"
        logger.info(f"üß† Claude API: {claude_status}")
        logger.info(f"üì∫ –ö–∞–Ω–∞–ª–æ–≤: {info['channels_count']}")
        dialogue_status = "‚úÖ" if info['dialogue_analysis_enabled'] else "‚ùå"
        logger.info(f"üí¨ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {dialogue_status}")

    async def _setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ú–∏–≥—Ä–∞—Ü–∏–∏
            await migrate_database_for_ai()
            await migrate_database_for_dialogues()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await init_database()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: {e}")
            raise

    async def _create_telegram_app(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        logger.info("üì± –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        try:
            bot_token = self.config['bot']['token']
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º builder —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            builder = Application.builder()
            builder.token(bot_token)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            builder.concurrent_updates(True)
            builder.rate_limiter(None)  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π rate limiter
            
            self.app = builder.build()
            
            logger.info("‚úÖ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            raise

    async def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        try:
            self.user_handler = UserHandler(self.config)
            self.admin_handler = AdminHandler(self.config)
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise

    async def _setup_ai_parser(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –ø–∞—Ä—Å–µ—Ä–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏–º–ø–æ—Ä—Ç–æ–≤"""
        logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –ø–∞—Ä—Å–µ—Ä–∞...")
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å fallback
            try:
                from myparser.main_parser import OptimizedUnifiedParser
                self.ai_parser = OptimizedUnifiedParser(self.config)
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω OptimizedUnifiedParser")
            except ImportError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OptimizedUnifiedParser: {e}")
                
                # Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä
                try:
                    from myparser.main_parser import UnifiedAIParser
                    self.ai_parser = UnifiedAIParser(self.config)
                    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω UnifiedAIParser")
                except ImportError:
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
                    from myparser import UnifiedAIParser
                    self.ai_parser = UnifiedAIParser(self.config)
                    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –±–∞–∑–æ–≤—ã–π UnifiedAIParser")
            
            self.app.bot_data['ai_parser'] = self.ai_parser
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä—É
            if hasattr(self.ai_parser, 'set_metrics_callback'):
                self.ai_parser.set_metrics_callback(self._record_parser_metrics)
            
            logger.info("‚úÖ AI –ø–∞—Ä—Å–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.ai_parser = None

    def _record_parser_metrics(self, event_type: str, **kwargs):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            if event_type == "message_processed":
                processing_time = kwargs.get('processing_time', 0)
                self.metrics.record_message_processed(processing_time)
            elif event_type == "ai_analysis":
                self.metrics.record_ai_analysis()
            elif event_type == "dialogue_created":
                self.metrics.record_dialogue_created()
            elif event_type == "lead_generated":
                self.metrics.record_lead_generated()
            elif event_type == "notification_sent":
                self.metrics.record_notification_sent()
            elif event_type == "error":
                self.metrics.record_error()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫: {e}")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self.app.add_handler(CommandHandler("start", self.user_handler.start))
            self.app.add_handler(CommandHandler("help", self.user_handler.help_command))
            self.app.add_handler(CommandHandler("menu", self.user_handler.menu))
            
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            self.app.add_handler(CommandHandler("admin", self.admin_handler.admin_panel))
            self.app.add_handler(CommandHandler("broadcast", self.admin_handler.broadcast))
            self.app.add_handler(CommandHandler("stats", self.admin_handler.show_stats))
            
            # –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.app.add_handler(CommandHandler("status", self._show_system_status))
            self.app.add_handler(CommandHandler("performance", self._show_performance_metrics))
            self.app.add_handler(CommandHandler("health", self._health_check))
            self.app.add_handler(CommandHandler("dialogues", self._show_active_dialogues))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.app.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND, 
                self._handle_message_with_metrics
            ))
            
            # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.app.add_handler(self.admin_handler.callback_handler)
            self.app.add_handler(self.user_handler.callback_handler)
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise

    async def _handle_message_with_metrics(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        start_time = time.time()
        
        try:
            if not update.message or not update.message.text:
                return
            
            chat = update.effective_chat
            user = update.effective_user
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–ª—è Unicode)
            log_data = {
                'event': 'message_received',
                'user_id': user.id,
                'chat_id': chat.id,
                'chat_type': chat.type,
                'message_length': len(update.message.text),
                'timestamp': datetime.now().isoformat()
            }
            
            logger.info(f"üì® Message received: {json.dumps(log_data, ensure_ascii=False)}")
            
            if chat.type == 'private':
                # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self.user_handler.handle_message(update, context)
                logger.debug(f"Private message processed for user {user.id}")
                
            elif chat.type in ['group', 'supergroup', 'channel']:
                # –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - AI –ø–∞—Ä—Å–∏–Ω–≥
                if self.ai_parser and hasattr(self.ai_parser, 'enabled') and self.ai_parser.enabled:
                    if self.ai_parser.is_channel_monitored(chat.id, chat.username):
                        logger.debug(f"Processing group message from channel {chat.id}")
                        await self.ai_parser.process_message(update, context)
                    else:
                        logger.debug(f"Channel {chat.id} not monitored")
                else:
                    logger.warning("AI parser not available or disabled")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            processing_time = time.time() - start_time
            self.metrics.record_message_processed(processing_time)
            
            if processing_time > 2.0:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                logger.warning(f"Slow message processing: {processing_time:.2f}s for user {user.id}")
            
        except Exception as e:
            self.metrics.record_error()
            logger.error(f"‚ùå Error processing message: {e}", exc_info=True)

    async def _show_system_status(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        user_id = update.effective_user.id
        admin_ids = self.config.get('bot', {}).get('admin_ids', [])
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            status_info = []
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
            status_info.append("ü§ñ **–°—Ç–∞—Ç—É—Å AI CRM —Å–∏—Å—Ç–µ–º—ã**\n")
            
            # AI –ø–∞—Ä—Å–µ—Ä
            if self.ai_parser and hasattr(self.ai_parser, 'get_status'):
                parser_status = self.ai_parser.get_status()
                status_enabled = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if parser_status.get('enabled') else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
                status_info.append(f"üîç **AI –ü–∞—Ä—Å–µ—Ä:** {status_enabled}")
                status_info.append(f"üì∫ **–ö–∞–Ω–∞–ª–æ–≤:** {parser_status.get('channels_count', 0)}")
                status_info.append(f"üí¨ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:** {parser_status.get('active_dialogues', 0)}")
                status_info.append(f"üéØ **–†–µ–∂–∏–º:** {parser_status.get('mode', 'unknown')}")
            else:
                status_info.append("üîç **AI –ü–∞—Ä—Å–µ—Ä:** ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # Claude API
            try:
                from ai.claude_client import get_claude_client
                claude_client = get_claude_client()
                if claude_client:
                    health = await claude_client.health_check()
                    claude_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if health else "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    status_info.append(f"üß† **Claude API:** {claude_status}")
                else:
                    status_info.append("üß† **Claude API:** ‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception:
                status_info.append("üß† **Claude API:** ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            metrics = self.metrics.get_metrics()
            status_info.append(f"\nüìä **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**")
            status_info.append(f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {metrics['uptime_formatted']}")
            status_info.append(f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {metrics['messages_processed']}")
            status_info.append(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {metrics['average_processing_time']:.3f}—Å")
            status_info.append(f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –ª–∏–¥–æ–≤: {metrics['leads_generated']}")
            status_info.append(f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—à–∏–±–æ–∫: {metrics['error_rate']:.2%}")
            
            await update.message.reply_text('\n'.join(status_info), parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error showing system status: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")

    async def _show_performance_metrics(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        admin_ids = self.config.get('bot', {}).get('admin_ids', [])
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            metrics = self.metrics.get_metrics()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
            parser_metrics = {}
            if self.ai_parser and hasattr(self.ai_parser, 'get_performance_metrics'):
                parser_metrics = self.ai_parser.get_performance_metrics()
            
            message = f"""üìä **–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**

‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {metrics['uptime_formatted']}

üìà **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:**
‚Ä¢ –í—Å–µ–≥–æ: {metrics['messages_processed']}
‚Ä¢ –í –º–∏–Ω—É—Ç—É: {metrics['messages_per_minute']:.1f}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {metrics['average_processing_time']:.3f}—Å

ü§ñ **AI –∞–Ω–∞–ª–∏–∑:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {metrics['ai_analyses_completed']}
‚Ä¢ –î–∏–∞–ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {metrics['dialogues_created']}

üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –õ–∏–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {metrics['leads_generated']}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {metrics['notifications_sent']}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ª–∏–¥—ã: {metrics['conversion_rate']:.2%}

‚ö†Ô∏è **–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:**
‚Ä¢ –û—à–∏–±–æ–∫: {metrics['errors_count']}
‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—à–∏–±–æ–∫: {metrics['error_rate']:.2%}"""

            if parser_metrics and not parser_metrics.get('no_data'):
                message += f"""

üîç **–ü–∞—Ä—Å–µ—Ä:**
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ª–∏–¥–æ–≤: {parser_metrics.get('leads_conversion_rate', 0):.2f}%
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {parser_metrics.get('notification_rate', 0):.2f}%
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {parser_metrics.get('cache_efficiency', 0)}"""

            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error showing performance metrics: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    async def _health_check(self, update, context):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        user_id = update.effective_user.id
        admin_ids = self.config.get('bot', {}).get('admin_ids', [])
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            health_status = []
            overall_health = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                from database.operations import get_bot_stats
                await get_bot_stats()
                health_status.append("üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
            except Exception as e:
                health_status.append(f"üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** ‚ùå –û—à–∏–±–∫–∞")
                overall_health = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Claude API
            try:
                from ai.claude_client import get_claude_client
                claude_client = get_claude_client()
                if claude_client:
                    claude_health = await claude_client.health_check()
                    claude_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if claude_health else "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    health_status.append(f"üß† **Claude API:** {claude_status}")
                    if not claude_health:
                        overall_health = False
                else:
                    health_status.append("üß† **Claude API:** ‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º)")
            except Exception:
                health_status.append("üß† **Claude API:** ‚ùå –û—à–∏–±–∫–∞")
                overall_health = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –ø–∞—Ä—Å–µ—Ä–∞
            if self.ai_parser:
                health_status.append("ü§ñ **AI –ü–∞—Ä—Å–µ—Ä:** ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                health_status.append("ü§ñ **AI –ü–∞—Ä—Å–µ—Ä:** ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                overall_health = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
            metrics = self.metrics.get_metrics()
            if metrics['error_rate'] > 0.1:  # –ë–æ–ª–µ–µ 10% –æ—à–∏–±–æ–∫
                health_status.append(f"‚ö†Ô∏è **–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫:** {metrics['error_rate']:.2%}")
                overall_health = False
            else:
                health_status.append("‚úÖ **–£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ –≤ –Ω–æ—Ä–º–µ**")
            
            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            overall_emoji = "‚úÖ" if overall_health else "‚ö†Ô∏è"
            overall_text = "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" if overall_health else "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã"
            
            message = f"{overall_emoji} **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã**\n\n{overall_text}\n\n" + '\n'.join(health_status)
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error in health check: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")

    async def _show_active_dialogues(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏"""
        user_id = update.effective_user.id
        admin_ids = self.config.get('bot', {}).get('admin_ids', [])
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            if not self.ai_parser or not hasattr(self.ai_parser, 'dialogue_tracker'):
                await update.message.reply_text("‚ùå –¢—Ä–µ–∫–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            if not hasattr(self.ai_parser.dialogue_tracker, 'active_dialogues'):
                await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
                
            active_dialogues = self.ai_parser.dialogue_tracker.active_dialogues
            
            if not active_dialogues:
                await update.message.reply_text("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç")
                return
            
            message_parts = [f"üí¨ **–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ ({len(active_dialogues)})**\n"]
            
            for i, (dialogue_id, dialogue) in enumerate(list(active_dialogues.items())[:10], 1):
                duration = (datetime.now() - dialogue.start_time).total_seconds() / 60
                
                message_parts.append(
                    f"{i}. **{dialogue.channel_title}**\n"
                    f"   üë• {len(dialogue.participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                    f"   üí¨ {len(dialogue.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    f"   ‚è±Ô∏è {duration:.0f} –º–∏–Ω\n"
                    f"   üè¢ {'–ë–∏–∑–Ω–µ—Å' if getattr(dialogue, 'business_score', 0) > 0 else '–û–±—â–∏–π'}\n"
                )
            
            if len(active_dialogues) > 10:
                message_parts.append(f"\n... –∏ –µ—â–µ {len(active_dialogues) - 10} –¥–∏–∞–ª–æ–≥–æ–≤")
            
            await update.message.reply_text('\n'.join(message_parts), parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error showing active dialogues: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")

    async def check_channels_access(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º"""
        if not self.ai_parser:
            return
        
        try:
            status = self.ai_parser.get_status()
            channels = status.get('channels', [])
            
            if not channels:
                logger.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return
            
            bot_info = await self.app.bot.get_me()
            logger.info(f"ü§ñ –ë–æ—Ç: @{bot_info.username} (ID: {bot_info.id})")
            
            for channel in channels:
                try:
                    chat = await self.app.bot.get_chat(channel)
                    bot_member = await self.app.bot.get_chat_member(chat.id, bot_info.id)
                    
                    status_emoji = "‚úÖ" if bot_member.status in ['administrator', 'member'] else "‚ö†Ô∏è"
                    logger.info(f"{status_emoji} {chat.title} ({chat.id}) - {bot_member.status}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {channel}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")

    @asynccontextmanager
    async def run_context(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            self.is_running = True
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.app.initialize()
            await self.app.start()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
            await self.check_channels_access()
            
            logger.info("üéâ AI CRM Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
            if self.ai_parser and hasattr(self.ai_parser, 'get_status'):
                status = self.ai_parser.get_status()
                logger.info(f"üéØ –†–µ–∂–∏–º: {status.get('mode', 'unknown')}")
                logger.info(f"üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {status.get('channels_count', 0)} –∫–∞–Ω–∞–ª–æ–≤")
            
            yield
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—É—Å–∫–∞: {e}")
            raise
        finally:
            self.is_running = False
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            try:
                if self.app and self.app.updater and self.app.updater.running:
                    await self.app.updater.stop()
                if self.app:
                    await self.app.stop()
                    await self.app.shutdown()
                logger.info("üõë AI CRM Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
        try:
            await self.initialize()
            
            async with self.run_context():
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ polling
                await self.app.updater.start_polling(
                    drop_pending_updates=True,
                    allowed_updates=['message', 'callback_query']
                )
                
                logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                
                # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
                asyncio.create_task(self._background_tasks())
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤
                while not self._shutdown_requested:
                    await asyncio.sleep(1)
                
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                
        except KeyboardInterrupt:
            logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            raise

    async def _background_tasks(self):
        """–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
        try:
            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
            asyncio.create_task(self._daily_metrics_reset())
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            asyncio.create_task(self._performance_monitor())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")

    async def _daily_metrics_reset(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫"""
        while self.is_running and not self._shutdown_requested:
            try:
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                now = datetime.now()
                tomorrow = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
                sleep_time = (tomorrow - now).total_seconds()
                
                # –ñ–¥–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                for _ in range(int(sleep_time)):
                    if self._shutdown_requested:
                        break
                    await asyncio.sleep(1)
                
                if not self._shutdown_requested:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    self.metrics = PerformanceMetrics()
                    logger.info("üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫: {e}")
                await asyncio.sleep(3600)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ —á–∞—Å

    async def _performance_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        while self.is_running and not self._shutdown_requested:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                if self._shutdown_requested:
                    break
                
                metrics = self.metrics.get_metrics()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if metrics['error_rate'] > 0.05:  # –ë–æ–ª–µ–µ 5% –æ—à–∏–±–æ–∫
                    logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫: {metrics['error_rate']:.2%}")
                
                if metrics['average_processing_time'] > 1.0:  # –ë–æ–ª–µ–µ —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
                    logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {metrics['average_processing_time']:.3f}—Å")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if metrics['messages_processed'] > 0:
                    logger.info(
                        f"üìä Stats: {metrics['messages_processed']} msgs, "
                        f"{metrics['leads_generated']} leads, "
                        f"{metrics['error_rate']:.1%} error rate"
                    )
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    setup_logging()
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI CRM –±–æ—Ç–∞")
        
        bot = OptimizedAIBot()
        asyncio.run(bot.run())
        
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1
    finally:
        logger.info("üîö AI CRM Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())